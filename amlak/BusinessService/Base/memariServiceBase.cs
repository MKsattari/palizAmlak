using System;
using System.Data;

using RAD.AppFramework;
using RAD.AppFramework.Data;
using RAD.AppFramework.QueryObjects;

using amlak.Common;
using amlak.Data;
using amlak.DataAccess.Adapters;

namespace amlak.BusinessService.Base
{
	/// <summary>
	/// memariServiceBase is a base business object implementing the most common data operations 
	/// for the memari table. 
	/// </summary>
	/// <remarks>
	/// Any application specific business logic must be added to the 
	/// memariService class. Do not modify this class.
	///
	/// This class was automatically generated by Rad Software NextGeneration <a href="http://www.radsoftware.com.au">http://www.radsoftware.com.au</a>
	/// </remarks>
	public abstract class memariServiceBase : BusinessServiceObject
	{
		#region Fields
		
		/// <summary>
		/// The strongly-typed DataAdapter to use for Get and Update operations
		/// </summary>
		protected memariDataAdapter m_memariAdapter;
				
		#endregion
		
		
		#region Constructors
		
		/// <summary>
		/// Creates a new memariService
		/// </summary>
		public memariServiceBase() : base()
		{
			DbConnection = new DatabaseConnection(DataObjectFactory.CreateConnection());
			m_memariAdapter = new memariDataAdapter(DbConnection);
		}

		/// <summary>
		/// Creates a new memariService and sets the Database context
		/// </summary>
		public memariServiceBase(DatabaseConnection connection) : base()
		{
			UseConnectionAndTransaction(connection);

			m_memariAdapter = new memariDataAdapter(connection);
		}
		
		#endregion
		
		
		#region Protected Methods
		
		/// <summary>
		/// Creates an instance of a factory that is used to create Database objects
		/// </summary>
		/// <returns>A DatabaseAccessObjectFactory instance </returns>
		protected override DatabaseAccessObjectFactory CreateDataObjectFactory()
		{
			return CommonFactory.CreateDataObjectFactory();
		}
		
		
		#endregion

		
		#region Public Methods
		
		/// <summary>
		/// Perform any inserts, updates or deletes on the DataSet
		/// </summary>
		/// <param name="dataSetUpdate">The DataSet to update</param>
		/// <returns>The number of rows updated</returns>
		public virtual int UpdateDataSet(memariDataSet dataSetUpdate)
		{
			m_memariAdapter.UseConnectionAndTransaction(DbConnection);
		
			return m_memariAdapter.Update(dataSetUpdate);
		}
		
		
		/// <summary>
		/// Return all rows from the memari table
		/// </summary>
		/// <param name="dataSetFill">The DataSet to return the rows into</param>
		/// <returns>The number of rows added to the DataSet</returns>
		public virtual int GetAll(memariDataSet dataSetFill)
		{
			m_memariAdapter.UseConnectionAndTransaction(DbConnection);
		
			return m_memariAdapter.Fill(dataSetFill);
		}
		
		
			
		/// <summary>
		/// Return all rows from the memari table by Primary Key
		/// </summary>
		/// <param name="dataSetFill">The DataSet to return the rows into</param>
		/// <param name="MemariID">The MemariID to use as search criteria</param>
		/// <returns>The number of rows added to the DataSet</returns>
		public virtual int GetByMemariID(memariDataSet dataSetFill, Int32 MemariID)
		{
			m_memariAdapter.UseConnectionAndTransaction(DbConnection);
		
			return m_memariAdapter.FillByMemariID(dataSetFill, MemariID);
		}
	
		
		/// <summary>
		/// Return rows by Query Definition
		/// </summary>
		/// <param name="dataSetFill">The DataSet to return the rows into</param>
		/// <param name="queryDefinition">A Query object that defines the query</param>
		/// <returns>A count of the rows added to the DataSet</returns>
		public virtual int GetByQuery(DataSet dataSetFill, Query queryDefinition)
		{
			m_memariAdapter.UseConnectionAndTransaction(DbConnection);
		
			return m_memariAdapter.FillByQuery(dataSetFill, queryDefinition);
		}
		
		
		#endregion
	}
}
