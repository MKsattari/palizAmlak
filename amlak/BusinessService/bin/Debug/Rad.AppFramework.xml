<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RAD.AppFramework</name>
    </assembly>
    <members>
        <member name="T:RAD.AppFramework.Data.DatabaseAccessObjectFactory">
            <summary>
            The DataObjectFactory creates Database Access objects such
            as Connections and DataAdapters 
            </summary>
        </member>
        <member name="F:RAD.AppFramework.Data.DatabaseAccessObjectFactory.PARAM_MAX_SIZE_DEFAULT">
            <summary>
            The default value for a Parameter maximum size
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseAccessObjectFactory.#ctor(System.String)">
            <summary>
            Creates a new DataObjectFactory 
            specifying a connection string to the database
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseAccessObjectFactory.#ctor">
            <summary>
            Creates a new DataObjectFactory
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseAccessObjectFactory.CreateConnection">
            <summary>
            Creates a new Connection 
            </summary>
            <returns>a new Connection</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseAccessObjectFactory.CreateConnection(System.String)">
            <summary>
            Creates a new Connection and sets the connection string
            </summary>
            <param name="connectString">The connection string for the new Connection</param>
            <returns>a new Connection</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseAccessObjectFactory.CreateDataAdapter">
            <summary>
            Creates a new DataAdapter
            </summary>
            <returns>a new DataAdapter</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseAccessObjectFactory.CreateCommand">
            <summary>
            Creates a new Database Command 
            </summary>
            <returns>a new Database Command</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseAccessObjectFactory.CreateCommand(System.Data.CommandType)">
            <summary>
            Creates a new Database Command of the specified CommandType
            </summary>
            <param name="cmdType">The type of Command to create</param>
            <returns>a new Command of the specified CommandType</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseAccessObjectFactory.CreateCommand(RAD.AppFramework.Data.DatabaseConnection,System.Data.CommandType)">
            <summary>
            Creates a new Database Command of the specified CommandType 
            using the Database Connection and Transaction
            </summary>
            <param name="dbConnection">The DatabaseConnection to use</param>
            <param name="cmdType">The type of Command to create</param>
            <returns>a new Command of the specified CommandType linked to the DatabaseConnection</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseAccessObjectFactory.CreateCommand(System.Data.IDbConnection,System.Data.CommandType)">
            <summary>
            Creates a new Database Command of the specified CommandType 
            using the Database Connection specified
            </summary>
            <param name="connection">The connection that the Command will use</param>
            <param name="cmdType">The type of Command to create</param>
            <returns>a new Command of the specified CommandType linked to the Database Connection</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseAccessObjectFactory.CreateCommandParameter(System.String,System.Enum,System.Int32,System.Object)">
            <summary>
            Creates a Parameter for a Command 
            and sets the Data type, 
            Parameter maximum size and the value of the Parameter
            </summary>
            <param name="parameterNameNew">The name of the Parameter</param>
            <param name="dataType">The Data type of the Parameter</param>
            <param name="paramMaxSize">The maximum size of the value for this Parameter</param>
            <param name="value">The value of the Parameter</param>
            <returns>a new CommandParameter</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseAccessObjectFactory.CreateCommandParameter(System.String,System.Enum,System.Object)">
            <summary>
            Creates a Parameter for a Command and 
            sets the Data type and value of the Parameter
            </summary>
            <param name="parameterNameNew">The name of the Parameter</param>
            <param name="dataType">The Data type of the Parameter</param>
            <param name="value">The value of the Parameter</param>
            <returns>A new CommandParameter</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseAccessObjectFactory.CreateCommandParameter(System.String,System.String,System.Enum,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Creates a Parameter for a Command and 
            sets the Data type, Parameter maximum size, source Column name
            and source row version
            </summary>
            <param name="parameterNameNew">The name of the Parameter</param>
            <param name="sourceColumnName">The Column in the DataTable that the Parameter value will be set from</param>
            <param name="dataType">The Data type of the Parameter</param>
            <param name="paramMaxSize">The maximum size of the value for this Parameter</param>
            <param name="sourceRowVersion">The version of the row in the DataTable that the Parameter value will be set from</param>
            <returns>A new CommandParameter</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseAccessObjectFactory.CreateCommandParameter(System.String,System.String,System.Enum)">
            <summary>
            Creates a Parameter for a Command and 
            sets the Data type, source Column name and the value of the parameter
            </summary>
            <param name="parameterNameNew">The name of the Parameter</param>
            <param name="sourceColumnName">The Column in the DataTable that the Parameter value will be set from</param>
            <param name="dataType">The Data type of the Parameter</param>
            <returns>A new CommandParameter</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseAccessObjectFactory.CreateCommandParameter(System.String,System.String,System.Enum,System.Int32)">
            <summary>
            Creates a Parameter for a Command 
            and sets the Data type, Parameter maximum size 
            and the source Column name
            </summary>
            <param name="parameterNameNew">The name of the Parameter</param>
            <param name="sourceColumnName">The Column in the DataTable that the Parameter value will be set from</param>
            <param name="dataType">The Data type of the Parameter</param>
            <param name="paramMaxSize">The maximum size of the value for this Parameter</param>
            <returns>A new CommandParameter</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseAccessObjectFactory.CreateCommandParameter(System.String,System.String,System.Enum,System.Data.DataRowVersion)">
            <summary>
            Creates a Parameter for a Command 
            and sets the Data type, source Column name and
            source row version
            </summary>
            <param name="parameterNameNew">The name of the Parameter</param>
            <param name="sourceColumnName">The Column in the DataTable that the Parameter value will be set from</param>
            <param name="dataType">The Data type of the Parameter</param>
            <param name="sourceRowVersion">The version of the row in the DataTable that the Parameter value will be set from</param>
            <returns>A new CommandParameter</returns>
        </member>
        <member name="P:RAD.AppFramework.Data.DatabaseAccessObjectFactory.ConnectionString">
            <summary>
            The connection string for the Database
            </summary>
        </member>
        <member name="P:RAD.AppFramework.Data.DatabaseAccessObjectFactory.CommandTimeout">
            <summary>
            Gets or sets the wait time before terminating the attempt 
            to execute a command and generating an error
            </summary>
            <value>The time in seconds to wait for the command to execute. The default is 30 seconds</value>
        </member>
        <member name="T:RAD.AppFramework.Data.DatabaseConnection">
            <summary>
            Represents a connection to a Database and a transaction used on that connection
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:RAD.AppFramework.Data.DatabaseConnection.m_Connection">
            <summary>
            The Database Connection
            </summary>
        </member>
        <member name="F:RAD.AppFramework.Data.DatabaseConnection.m_Transaction">
            <summary>
            The Transaction associated with the Database Connection
            </summary>
        </member>
        <member name="F:RAD.AppFramework.Data.DatabaseConnection.m_IsolationLevel">
            <summary>
            The Transaction Isolation level
            </summary>
        </member>
        <member name="F:RAD.AppFramework.Data.DatabaseConnection.m_OpenCount">
            <summary>
            A count of the number of times the Database Connection has been opened
            </summary>
        </member>
        <member name="F:RAD.AppFramework.Data.DatabaseConnection.m_BeginTransactionOnOpen">
            <summary>
            If true a Transaction will begin when the Connection is opened
            </summary>
        </member>
        <member name="F:RAD.AppFramework.Data.DatabaseConnection.m_TransactionCount">
            <summary>
            A count of the number of times the Transaction has begun
            </summary>
        </member>
        <member name="F:RAD.AppFramework.Data.DatabaseConnection.m_CommitCount">
            <summary>
            A count of the number of times the Transaction has been commited
            </summary>
        </member>
        <member name="F:RAD.AppFramework.Data.DatabaseConnection.m_RollbackCount">
            <summary>
            A count of the number of times the Transaction has been rolled back
            </summary>
        </member>
        <member name="F:RAD.AppFramework.Data.DatabaseConnection.m_IsDisposed">
            <summary>
            If true the DatabaseConnection has been disposed
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseConnection.#ctor">
            <summary>
            Creates a new DatabaseConnection
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseConnection.#ctor(System.Data.IsolationLevel)">
            <summary>
            Creates a new DatabaseConnection and specifies the Transaction isolation level
            </summary>
            <param name="isolationLevel">The isolation level to use for the Transaction</param>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseConnection.#ctor(System.Data.IDbConnection)">
            <summary>
            Creates a new DatabaseConnection and specifies the underlying connection to use
            </summary>
            <param name="connection">The connection to use</param>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseConnection.Dispose(System.Boolean)">
            <summary>
            Frees any unmanaged resources
            </summary>
            <param name="disposing">true if currently disposing</param>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseConnection.Dispose">
            <summary>
            Frees any unmanaged resources
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseConnection.EndTransaction">
            <summary>
            Ends the Transaction and commits or rolls back the Transaction 
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a transaction for the Database Connection
            </summary>
            <param name="isolationLevel">The isolation level to use for the Transaction</param>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseConnection.BeginTransaction">
            <summary>
            Begins a transaction for the Database Connection
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseConnection.CommitTransaction">
            <summary>
            Commits the Transaction 
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseConnection.RollbackTransaction">
            <summary>
            Rolls back the Transaction
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseConnection.Open">
            <summary>
            Opens the connection to the database and begins a transaction
            if BeginTransaction() has previously been called
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Data.DatabaseConnection.Close">
            <summary>
            Closes the connection to the Database
            </summary>
        </member>
        <member name="P:RAD.AppFramework.Data.DatabaseConnection.Connection">
            <summary>
            The underlying Database connection
            </summary>
        </member>
        <member name="P:RAD.AppFramework.Data.DatabaseConnection.Transaction">
            <summary>
            The Database Transaction for this Connection
            </summary>
        </member>
        <member name="T:RAD.AppFramework.Data.OleDbDatabaseAccessObjectFactory">
            <summary>
            OleDbDatabaseAccessObjectFactory creates OLEDB Data Access objects
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Data.OleDbDatabaseAccessObjectFactory.#ctor">
            <summary>
            Creates a OleDbDatabaseAccessObjectFactory 
            </summary>		
        </member>
        <member name="M:RAD.AppFramework.Data.OleDbDatabaseAccessObjectFactory.#ctor(System.String)">
            <summary>
            Creates a new OleDbDatabaseAccessObjectFactory
            </summary>		
        </member>
        <member name="M:RAD.AppFramework.Data.OleDbDatabaseAccessObjectFactory.CreateConnection">
            <summary>
            Creates a new OleDbConnection
            </summary>
            <returns>a new OleDbConnection</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.OleDbDatabaseAccessObjectFactory.CreateDataAdapter">
            <summary>
            Creates a new OleDbDataAdapter
            </summary>
            <returns>a new OleDbDataAdapter</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.OleDbDatabaseAccessObjectFactory.CreateCommand">
            <summary>
            Creates a new Command
            </summary>
            <returns>a new Command</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.OleDbDatabaseAccessObjectFactory.CreateCommandParameter(System.String,System.Enum,System.Int32,System.Object)">
            <summary>
            Creates a new OleDbCommandParameter 
            and sets the Data type, Parameter maximum size
            and Parameter value
            </summary>
            <param name="parameterNameNew">The name of the Parameter</param>
            <param name="dataType">The Data type of the Parameter. It can be a DbType or a OleDbType</param>
            <param name="paramMaxSize">The maximum size of the value for this Parameter</param>
            <param name="value">The value for this Parameter</param>
            <returns>a new OleDbCommandParameter</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.OleDbDatabaseAccessObjectFactory.CreateCommandParameter(System.String,System.String,System.Enum,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Creates a new OleDbCommandParameter 
            and sets the Data type, Parameter maximum size,
            source Column name and source row version
            </summary>
            <param name="parameterNameNew">The name of the Parameter</param>
            <param name="sourceColumnName">The Column in the DataTable that the Parameter value will be set from</param>
            <param name="dataType">The Data type of the Parameter. It can be a DbType or a OleDbType</param>
            <param name="paramMaxSize">The maximum size of the value for this Parameter</param>
            <param name="sourceRowVersion">The version of the row in the DataTable that the Parameter value will be set from</param>
            <returns>a new OleDbCommandParameter</returns>
        </member>
        <member name="T:RAD.AppFramework.Data.SqlDatabaseAccessObjectFactory">
            <summary>
            SqlDataObjectFactory creates SQL Server Data Access objects
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Data.SqlDatabaseAccessObjectFactory.#ctor">
            <summary>
            Creates a SqlDataObjectFactory 
            </summary>		
        </member>
        <member name="M:RAD.AppFramework.Data.SqlDatabaseAccessObjectFactory.#ctor(System.String)">
            <summary>
            Creates a new SqlDataObjectFactory
            </summary>		
        </member>
        <member name="M:RAD.AppFramework.Data.SqlDatabaseAccessObjectFactory.CreateConnection">
            <summary>
            Creates a new SqlConnection
            </summary>
            <returns>a new SqlConnection</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.SqlDatabaseAccessObjectFactory.CreateDataAdapter">
            <summary>
            Creates a new SqlDataAdapter
            </summary>
            <returns>a new SqlDataAdapter</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.SqlDatabaseAccessObjectFactory.CreateCommand">
            <summary>
            Creates a new Command
            </summary>
            <returns>a new Command</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.SqlDatabaseAccessObjectFactory.CreateCommandParameter(System.String,System.Enum,System.Int32,System.Object)">
            <summary>
            Creates a new SqlCommandParameter 
            and sets the Data type, Parameter maximum size
            and Parameter value
            </summary>
            <param name="parameterNameNew">The name of the Parameter</param>
            <param name="dataType">The Data type of the Parameter. It can be a DbType or a SqlDbType</param>
            <param name="paramMaxSize">The maximum size of the value for this Parameter</param>
            <param name="value">The value for this Parameter</param>
            <returns>a new SqlCommandParameter</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.SqlDatabaseAccessObjectFactory.CreateCommandParameter(System.String,System.String,System.Enum,System.Int32,System.Data.DataRowVersion)">
            <summary>
            Creates a new SqlCommandParameter 
            and sets the Data type, Parameter maximum size,
            source Column name and source row version
            </summary>
            <param name="parameterNameNew">The name of the Parameter</param>
            <param name="sourceColumnName">The Column in the DataTable that the Parameter value will be set from</param>
            <param name="dataType">The Data type of the Parameter. It can be a DbType or a SqlDbType</param>
            <param name="paramMaxSize">The maximum size of the value for this Parameter</param>
            <param name="sourceRowVersion">The version of the row in the DataTable that the Parameter value will be set from</param>
            <returns>a new SqlCommandParameter</returns>
        </member>
        <member name="T:RAD.AppFramework.Data.StronglyTypedDataReader">
            <summary>
            StronglyTypedDataReader
            </summary>
        </member>
        <member name="F:RAD.AppFramework.Data.StronglyTypedDataReader.m_Connection">
            <summary>
            Database connection
            </summary>
        </member>
        <member name="F:RAD.AppFramework.Data.StronglyTypedDataReader.m_CommandSelect">
            <summary>
            Represents the SQL SELECT Command 
            </summary>
        </member>
        <member name="F:RAD.AppFramework.Data.StronglyTypedDataReader.m_DataReader">
            <summary>
            Used to iterate through the results of the SELECT Command 
            </summary>
        </member>
        <member name="F:RAD.AppFramework.Data.StronglyTypedDataReader.m_DataRecord">
            <summary>
            Used to get the values of the results of the SELECT Command
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.#ctor">
            <summary>
            Creates a new instance of the StronglyTypedDataReader class
            </summary>		
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.OpenReader">
            <summary>
            Executes the SQL SELECT Command defined by m_CommandSelect
            and initialises the DataReader with the results
            </summary>
            <returns>true on success, false otherwise</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.SetColumnOrdinals">
            <summary>
            Sets the indexes of the columns within the result set
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.Close">
            <summary>
            Closes the CalendarDataReader
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetSchemaTable">
            <summary>
            Returns a DataTable that describes the Column metadata of the CalendarDataReader
            </summary>
            <returns>A DataTable that describes the Column metadata</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.NextResult">
            <summary>
            Advances the DataReader to the next result, when reading the results of batch SQL statements
            </summary>
            <returns>true if there are more rows, false otherwise</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.Read">
            <summary>
            Advances the ConsultantDataReader to the next record
            </summary>
            <returns>true if there are more rows, false otherwise</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified Column as a Boolean
            </summary>
            <param name="i">The zero-based Column ordinal</param>
            <returns>The value of the Column</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetByte(System.Int32)">
            <summary>
            Gets the 8-bit unsigned integer value of the specified Column
            </summary>
            <param name="i">The zero-based Column ordinal</param>
            <returns></returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified Column offset 
            into the buffer as an array, starting at the given buffer offset
            </summary>
            <param name="i">The zero-based Column ordinal</param>
            <param name="fieldOffset">The index within the field from which to begin the read operation</param>
            <param name="buffer">The buffer into which to read the stream of bytes</param>
            <param name="bufferoffset">The index for buffer to begin the read operation</param>
            <param name="length">The number of bytes to read</param>
            <returns>The actual number of bytes read</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetChar(System.Int32)">
            <summary>
            Gets the character value of the specified Column
            </summary>
            <param name="i">The zero-based Column ordinal</param>
            <returns>The character value of the specified Column</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified Column offset into the buffer as an array, starting at the given buffer offset
            </summary>
            <param name="i">The zero-based Column ordinal</param>
            <param name="fieldoffset">The index within the row from which to begin the read operation</param>
            <param name="buffer">The buffer into which to read the stream of bytes</param>
            <param name="bufferoffset">The index for buffer to begin the read operation</param>
            <param name="length">The number of bytes to read</param>
            <returns>The actual number of characters read</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetData(System.Int32)">
            <summary>
            Gets an IDataReader to be used when the field points to more remote structured data
            </summary>
            <param name="i">The zero-based Column ordinal</param>
            <returns>Gets an IDataReader to be used when the field points to more remote structured data</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the data type information for the specified field
            </summary>
            <param name="i">The zero-based Column ordinal</param>
            <returns>The data type information for the specified field</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the date and time data value of the spcified field
            </summary>
            <param name="i">The zero-based Column ordinal</param>
            <returns>The date and time data value of the specified field</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the fixed-position numeric value of the specified field
            </summary>
            <param name="i">The zero-based Column ordinal</param>
            <returns>The fixed-position numeric value of the specified field</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the double-precision floating point number of the specified field
            </summary>
            <param name="i">The zero-based Column ordinal</param>
            <returns>The double-precision floating point number of the specified field</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the Type information corresponding to the type of Object 
            that would be returned from GetValue
            </summary>
            <param name="i">The zero-based Column ordinal</param>
            <returns>The Type information corresponding to the type of Object that would be returned from GetValue</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the single-precision floating point number of the specified field
            </summary>
            <param name="i">The zero-based Column ordinal</param>
            <returns>The single-precision floating point number of the specified field</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetGuid(System.Int32)">
            <summary>
            Returns the guid value of the specified field
            </summary>
            <param name="i">The zero-based Column ordinal</param>
            <returns>The guid value of the specified field</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the 16-bit signed integer value of the specified field
            </summary>
            <param name="i">The zero-based Column ordinal</param>
            <returns>The 16-bit signed integer value of the specified field</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the 32-bit signed integer value of the specified field
            </summary>
            <param name="i">The zero-based Column ordinal</param>
            <returns>The 32-bit signed integer value of the specified field</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the 64-bit signed integer value of the specified field
            </summary>
            <param name="i">The zero-based Column ordinal</param>
            <returns>The 64-bit signed integer value of the specified field</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetName(System.Int32)">
            <summary>
            Gets the name for the field to find
            </summary>
            <param name="i">The zero-based Column ordinal</param>
            <returns>The name of the field or the empty string (""), if there is no value to return</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetOrdinal(System.String)">
            <summary>
            Return the index of the named field
            </summary>
            <param name="name">The name of the field to find</param>
            <returns>The index of the named field</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetString(System.Int32)">
            <summary>
            Gets the string value of the specified field
            </summary>
            <param name="i">The zero-based Column ordinal</param>
            <returns>The string value of the specified field</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetValue(System.Int32)">
            <summary>
            Return the value of the specified field
            </summary>
            <param name="i">The zero-based Column ordinal</param>
            <returns>The Object which will contain the field value upon return</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetValues(System.Object[])">
            <summary>
            Gets all the attribute fields in the collection for the current record.
            </summary>
            <param name="values">An array of Object to copy the attribute fields into</param>
            <returns>The number of instances of Object in the array</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is set to NULL
            </summary>
            <param name="i">The zero-based Column ordinal</param>
            <returns>true if the specified field is set to null, false otherwise</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the results of the DataReader
            </summary>
            <returns>an enumerator that can iterate through the rowset</returns>
        </member>
        <member name="M:RAD.AppFramework.Data.StronglyTypedDataReader.Dispose">
            <summary>
            Closes connections and frees resources
            </summary>
        </member>
        <member name="P:RAD.AppFramework.Data.StronglyTypedDataReader.Connection">
            <summary>
            Database connection
            </summary>
        </member>
        <member name="P:RAD.AppFramework.Data.StronglyTypedDataReader.CommandSelect">
            <summary>
            Represents the SQL SELECT Command 
            </summary>
        </member>
        <member name="P:RAD.AppFramework.Data.StronglyTypedDataReader.DataReader">
            <summary>
            Used to iterate through the results of the SELECT Command 
            </summary>
        </member>
        <member name="P:RAD.AppFramework.Data.StronglyTypedDataReader.DataRecord">
            <summary>
            Used to get the values of the results of the SELECT Command
            </summary>
        </member>
        <member name="P:RAD.AppFramework.Data.StronglyTypedDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row
            </summary>
        </member>
        <member name="P:RAD.AppFramework.Data.StronglyTypedDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed
            </summary>
        </member>
        <member name="P:RAD.AppFramework.Data.StronglyTypedDataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            SELECT statements will always return -1
            </summary>
        </member>
        <member name="P:RAD.AppFramework.Data.StronglyTypedDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row
            </summary>
        </member>
        <member name="P:RAD.AppFramework.Data.StronglyTypedDataReader.Item(System.String)">
            <summary>
            Gets the Column with the specified name
            </summary>
        </member>
        <member name="P:RAD.AppFramework.Data.StronglyTypedDataReader.Item(System.Int32)">
            <summary>
            Gets the Column located at the specified index
            </summary>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.AccessQueryBuilder">
            <summary>
            A QueryBuilder for use with Microsoft Access Databases
            </summary>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.SqlQueryBuilder">
            <summary>
            A QueryBuilder that builds ANSI-SQL style queries 
            <seealso cref="T:RAD.AppFramework.QueryObjects.AccessQueryBuilder"/>
            <seealso cref="T:RAD.AppFramework.QueryObjects.SqlServerQueryBuilder"/>
            </summary>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.IQueryBuilder">
            <summary>
            A QueryBuilder is used to create an SQL query for a specific Database platform
            <seealso cref="T:RAD.AppFramework.QueryObjects.AccessQueryBuilder"/>
            <seealso cref="T:RAD.AppFramework.QueryObjects.SqlServerQueryBuilder"/>
            </summary>
            <example>
            <code>Query CustomerQuery = new Query(<b>new SqlServerQueryBuilder()</b>);</code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.IQueryBuilder.CreateCommand">
            <summary>
            creates a provider-specific Command
            </summary>
            <returns>A new Command</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.IQueryBuilder.CreateCommandParameter">
            <summary>
            Creates a provider-specific Command parameter
            </summary>
            <returns>A new CommandParameter</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.IQueryBuilder.GetTableName(System.String)">
            <summary>
            Returns a formatted Table name
            </summary>
            <param name="tableName">The raw Table name</param>
            <returns>A formatted Table name</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.IQueryBuilder.GetColumnName(System.String)">
            <summary>
            Return a formatted Column name for the Database provider
            </summary>
            <param name="columnName">The raw Column name</param>
            <returns>A formatted Column name</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.IQueryBuilder.GetParameterName(System.String)">
            <summary>
            Returns a formatted Parameter name for the Database provider
            </summary>
            <param name="columnName">The raw Column name</param>
            <returns>A formatted Parameter name</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.IQueryBuilder.IndentIncrease">
            <summary>
            Increases the indent level in the query text by one level
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.IQueryBuilder.IndentDecrease">
            <summary>
            Decreases the indent level in the query text by one level
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.IQueryBuilder.BuildCommand(System.Data.IDbCommand,RAD.AppFramework.QueryObjects.Query)">
            <summary>
            Builds the text and parameters for a Command object from the specified Query definition
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.IQueryBuilder.IndentString">
            <summary>
            A string that holds the current number of tabs or spaces to indent to the correct
            level
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.IQueryBuilder.AndText">
            <summary>
            The text for AND
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.IQueryBuilder.OrText">
            <summary>
            The text for OR
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.IQueryBuilder.NotText">
            <summary>
            The text for the negation keyword
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.IQueryBuilder.WildcardText">
            <summary>
            A character or string that is used as a wildcard in a LIKE query
            </summary>
            <example>
            For MS SQL Server the percent sign (%) is used
            </example>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.IQueryBuilder.Tables">
            <summary>
            A list of tables that are a part of the query
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.SqlQueryBuilder.m_AndText">
            <summary>
            The text to use for joining criteria
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.SqlQueryBuilder.m_OrText">
            <summary>
            The text to use when adding optional criteria
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.SqlQueryBuilder.m_NotText">
            <summary>
            The text to use when negating critiera
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.SqlQueryBuilder.m_WildcardText">
            <summary>
            The character to use as a wildcard for SQL LIKE queries
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.SqlQueryBuilder.m_TopPercentText">
            <summary>
            The text used to specify PERCENT in the TOP clause
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.SqlQueryBuilder.m_TableList">
            <summary>
            A list of tables used in the query
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.SqlQueryBuilder.m_IndentChar">
            <summary>
            The character string to use when indenting 
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.SqlQueryBuilder.m_IndentLevel">
            <summary>
            The current level of indenting
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.SqlQueryBuilder.m_IndentString">
            <summary>
            The indent string to use for the current indent level
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.SqlQueryBuilder.m_ParameterCount">
            <summary>
            The index of the current parameter
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlQueryBuilder.#ctor">
            <summary>
            Creates a new instance of the QueryBuilder class
            </summary>		
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlQueryBuilder.RemoveBadCharactersFromColumnName(System.String)">
            <summary>
            Removes any characters such as spaces 
            that are unsuitable for a parameter name
            </summary>
            <param name="columnName">The name of the Column in the Database</param>
            <returns>The Column name with spaces removed</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlQueryBuilder.IndentIncrease">
            <summary>
            Increases the indent level by one 
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlQueryBuilder.IndentDecrease">
            <summary>
            Decreases the indent level by one
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlQueryBuilder.BuildCommand(System.Data.IDbCommand,RAD.AppFramework.QueryObjects.Query)">
            <summary>
            Builds the CommandText and adds Parameters to the Command based on the query definition
            in the QueryObject
            </summary>
            <param name="command">The Command to set the CommandText on</param>
            <param name="queryDefinition">The query definition</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlQueryBuilder.CreateCommand">
            <summary>
            Creates a Command object
            </summary>
            <returns></returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlQueryBuilder.CreateCommandParameter">
            <summary>
            Creates a parameter for a Command object
            </summary>
            <returns></returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlQueryBuilder.GetTableName(System.String)">
            <summary>
            Gets a formatted table name
            </summary>
            <param name="tableName">The raw table name</param>
            <returns>a formatted table name</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlQueryBuilder.GetColumnName(System.String)">
            <summary>
            Gets a formatted Column name
            </summary>
            <param name="columnName">The raw Column name</param>
            <returns>a formatted Column name</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlQueryBuilder.GetParameterName(System.String)">
            <summary>
            Gets the name or marker for a Command paramter
            </summary>
            <param name="columnName">The name of the Column that the paramter is for</param>
            <returns>The parameter name</returns>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SqlQueryBuilder.ParameterCount">
            <summary>
            A count of the number of paramters added to the query.
            </summary>
            <remarks>
            Used to keep the parameter names unique.
            </remarks>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SqlQueryBuilder.Command">
            <summary>
            The IDbCommand object that the QueryBuilder will configure
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SqlQueryBuilder.IndentString">
            <summary>
            A string that contains the indent characters to the current indent level
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SqlQueryBuilder.AndText">
            <summary>
            Text for the keyword 'AND'
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SqlQueryBuilder.OrText">
            <summary>
            Text for the keyword 'OR'
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SqlQueryBuilder.NotText">
            <summary>
            Text for the keyword 'NOT'
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SqlQueryBuilder.WildcardText">
            <summary>
            Text for the wildcard character used in LIKE queries
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SqlQueryBuilder.TopPercentText">
            <summary>
            The text used to specify PERCENT in the TOP clause.
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SqlQueryBuilder.Tables">
            <summary>
            A list of Tables and Views that are a part of the Query
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.AccessQueryBuilder.#ctor">
            <summary>
            Creates a QueryBuilder for use with Microsoft Access Databases
            </summary>		
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.AccessQueryBuilder.CreateCommand">
            <summary>
            Creates a Database Command 
            </summary>
            <returns>a new Database Command</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.AccessQueryBuilder.CreateCommandParameter">
            <summary>
            Creates a Command Parameter
            </summary>
            <returns>a new Command Parameter</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.AccessQueryBuilder.GetParameterName(System.String)">
            <summary>
            Gets the name of the Parameter for the specified Criteria
            </summary>
            <param name="columnName">The name of Column that the parameter is for</param>
            <returns>a Parameter name</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.AccessQueryBuilder.GetTableName(System.String)">
            <summary>
            Gets a Table name
            </summary>
            <param name="tableName">The name of the Table as it is in the Database</param>
            <returns>a formatted or escaped Table name</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.AccessQueryBuilder.GetColumnName(System.String)">
            <summary>
            Gets a Column name
            </summary>
            <param name="columnName">The raw Column name</param>
            <returns>a formatted or escaped Column name</returns>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.BetweenQueryElement">
            <summary>
            QueryElement representing the SQL BETWEEN query predicate
            <seealso cref="T:RAD.AppFramework.QueryObjects.Criteria"/>
            </summary>
            <example>
            This example finds all rows in thee Employees table where
            HireDate is between 1st Jan 1993 and 31st Dec 1993
            or TitleOfCourtesy is 'Dr.'
            <code>
            Dim EmpReader As EmployeesDataReader = EmployeesService.CreateReader()
            
            Dim EmpQuery As Query = CommonFactory.CreateQuery()
            
            EmpQuery.And(Criteria.Between(EmployeesTable.HireDate, New DateTime(1993, 1, 1), New DateTime(1993, 12, 31)))
            EmpQuery.Or(Criteria.EqualTo(EmployeesTable.TitleOfCourtesy, "Dr."))
            
            EmpReader.SelectByQuery(EmpQuery)
            </code>
            </example>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.SqlQueryElement">
            <summary>
            A base SqlQueryElement
            </summary>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.QueryElement">
            <summary>
            Defines the basic functionality for a QueryElement
            </summary>
            <remarks>
            A Query element is made up of a Column, a comparison and 
            a literal value or values. e.g.
            <code>SalesResults.TotalSales &gt; 2000</code>
            If it is a column comparison the Query element is made up of a Column, a comparison
            and a second column e.g.
            <code>SalesResults.TotalSales &lt;= SalesResults.EstimatedTotalSales</code>
            </remarks>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.QueryElement.GetQueryText(RAD.AppFramework.QueryObjects.IQueryBuilder,System.Text.StringBuilder,System.Collections.ArrayList)">
            <summary>
            Adds to the Query text using the specified QueryBuilder
            </summary>
            <param name="builder">The IQueryBuilder to use to create the Query</param>
            <param name="queryText">A StringBuilder that contains the text of the Query</param>
            <param name="parameters">The parameters for any literal values in the Query</param>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.QueryElement.LogicalOperator">
            <summary>
            The joining operator that preceeds this query element
            e.g. LogicalOperator.And
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlQueryElement.#ctor">
            <summary>
            Creates a SqlQueryElement representing a part of a SQL WHERE clause
            </summary>		
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.Condition,RAD.AppFramework.QueryObjects.Comparison,RAD.AppFramework.QueryObjects.CompareAs,System.Object[])">
            <summary>
            Creates a SqlQueryElement representing a part of a SQL WHERE clause
            </summary>
            <param name="column">The schema enum value e.g. ClientTable.ClientID</param>
            <param name="matchCondition">The logical condition e.g. Condition.IsNot</param>
            <param name="comparisonType">The search condition e.g. Comparison.GreaterThan</param>
            <param name="compareMethod">The type of value stored in the values list e.g. ValueCompareType.Literal</param>
            <param name="values">The values to use for the comparison</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.Condition,RAD.AppFramework.QueryObjects.Comparison,System.Enum)">
            <summary>
            Creates a SqlQueryElement representing a part of a SQL WHERE clause
            that compares one Column against another
            </summary>
            <param name="column1">The schema enum for a Column e.g. ClientTable.SalesTotal</param>
            <param name="matchCondition">The logical condition e.g. Condition.IsNot</param>
            <param name="comparisonType">The search condition e.g. Comparison.GreaterThan</param>
            <param name="column2">The schema enum for a Column to compare agains e.g. ClientTable.SalesTarge</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlQueryElement.GetTableNameFromAttribute(System.Enum)">
            <summary>
            Gets the DatabaseTable attribute defined for a Schema enumeration
            </summary>
            <param name="column">The schema enum value e.g. ClientTable.ClientID</param>
            <returns>The DatabaseTable attribute for the enum or null if no attributes were found</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlQueryElement.CreateSingleValueComparison(RAD.AppFramework.QueryObjects.IQueryBuilder,System.String,System.String)">
            <summary>
            Helper function that adds a Criteria that takes a single value
            </summary>
            <param name="builder">The QueryBuilder to use to produce a query for the specific Database</param>
            <param name="queryOperator">The Query operator</param>
            <param name="parameterName">The name of the parameter that holds the value to compare</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlQueryElement.CreateColumnComparison(RAD.AppFramework.QueryObjects.IQueryBuilder,System.String)">
            <summary>
            Creates query text that compares two columns
            </summary>
            <param name="builder">The QueryBuilder to use to produce a query for the specific Database</param>
            <param name="queryOperator">The query operator e.g. "="</param>
            <returns>Query text that will compare two columns</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlQueryElement.CreateExpressionComparison(RAD.AppFramework.QueryObjects.IQueryBuilder,System.String)">
            <summary>
            Creates query text that compares a Column to an expression
            </summary>
            <param name="builder">The QueryBuilder to use to produce a query for the specific Database</param>
            <param name="queryOperator">The query operator e.g. "="</param>
            <returns>Query text that will compare the Column to an expression</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlQueryElement.AddTableToTableList(RAD.AppFramework.QueryObjects.IQueryBuilder,System.String)">
            <summary>
            Adds a table to the list of tables used in the query
            </summary>
            <param name="builder">The builder that has the Tables list</param>
            <param name="tableNameToAdd">The name of the table to add</param>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SqlQueryElement.QueryOperator">
            <summary>
            The query predicate
            </summary>
            <example>The equals sign "="</example>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SqlQueryElement.ConditionType">
            <summary>
            The logical condition e.g. Condition.IsNot
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SqlQueryElement.ComparisonType">
            <summary>
            The type of search to perform e.g. Comparison.GreaterThan
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SqlQueryElement.TableName">
            <summary>
            The name of the table that the Column belongs to e.g. "Orders"
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SqlQueryElement.ColumnName">
            <summary>
            The name of the Column that the Criteria will search e.g. "ClientId"
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SqlQueryElement.ColumnDataType">
            <summary>
            The datatype of the Column being searched e.g. DbType.AnsiString
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SqlQueryElement.Table2Name">
            <summary>
            The name of the table that the Column is being compared to 
            when one Column is being compared to another e.g. "OrderDetail"
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SqlQueryElement.Column2Name">
            <summary>
            The name of the Column that will be compared against 
            the first Column when one Column is being compared to another
            e.g. "OrderDetailId"
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SqlQueryElement.Values">
            <summary>
            The values to search for
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SqlQueryElement.ValueCompareType">
            <summary>
            The type of item that the values represent. This is set internally by the class.
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.BetweenQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.Condition,System.Object,System.Object)">
            <summary>
            Creates a new BetweenQueryElement that compares the Column to literal values
            </summary>
            <param name="column">The Column to compare e.g. ClientTable.SalesTotal</param>
            <param name="matchCondition">The negation condition e.g. Condition.IsNot</param>
            <param name="value1">The minimum value that will match e.g. 20</param>
            <param name="value2">The maxium value that will match e.g. 500</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.BetweenQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,RAD.AppFramework.QueryObjects.Condition,System.Object,System.Object)">
            <summary>
            Creates a new BetweenQueryElement that specifies the comparison method
            </summary>
            <param name="column">The Column to compare e.g. ClientTable.SalesTotal</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="matchCondition">The negation condition e.g. Condition.IsNot</param>
            <param name="value1">The minimum value that will match e.g. 20</param>
            <param name="value2">The maxium value that will match e.g. 500</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.BetweenQueryElement.#ctor">
            <summary>
            Creates a new BetweenQueryElement
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.BetweenQueryElement.GetQueryText(RAD.AppFramework.QueryObjects.IQueryBuilder,System.Text.StringBuilder,System.Collections.ArrayList)">
            <summary>
            Adds to the Query text using the specified QueryBuilder
            </summary>
            <param name="builder">The IQueryBuilder to use to create the Query</param>
            <param name="queryText">A StringBuilder that contains the text of the Query</param>
            <param name="parameters">The parameters for any literal values in the Query</param>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.CompareAs">
            <summary>
            The way in which to compare the value with the Column 
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.CompareAs.Literal">
            <summary>
            The value is a literal value such as a string or number
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.CompareAs.Expression">
            <summary>
            The value is an expression that will be evaluated by the Database
            </summary>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.Comparison">
            <summary>
            Defines the comparison type to use in the WHERE clause
            </summary>
            <example>
            If the comparison is <b>StartsWith</b> the WHERE clause would contain
            <b>columnname LIKE 'John%'</b>
            </example>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.Comparison.EqualTo">
            <summary>
            Find rows where the Column value matches exactly
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.Comparison.LessThan">
            <summary>
            Find rows where the Column value is less than the value to find
            </summary>
            <example>
            &lt;56
            </example>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.Comparison.LessThanOrEqualTo">
            <summary>
            Find rows where the Column value is less than or equal to the value to find 
            </summary>
            <example>
            &lt;=92
            </example>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.Comparison.GreaterThan">
            <summary>
            Find rows where the Column value is greater than the value to find 
            </summary>
            <example>
            &gt;87.40
            </example>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.Comparison.GreaterThanOrEqualTo">
            <summary>
            Find rows where the Column value is greater than or equal to the value to find 
            </summary>
            <example>
            &gt;=13.50
            </example>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.Comparison.Between">
            <summary>
            Find rows where the Column value is between value to find 1 and value to find 2
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.Comparison.Contains">
            <summary>
            Find rows where the Column value contains the specified text (for character fields only)
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.Comparison.StartsWith">
            <summary>
            Find rows where the Column value starts with the specified text (character fields only)
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.Comparison.EndsWith">
            <summary>
            Find rows where the Column value ends with the specified text (character fields only)
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.Comparison.IsNull">
            <summary>
            Find rows where the Column value is NULL (DBNull)
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.Comparison.In">
            <summary>
            Find rows where the Column contains values in the specified set of values
            </summary>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.Condition">
            <summary>
            The condition to use for matching the query expression
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.Condition.Is">
            <summary>
            Match the Criteria condition as specified
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.Condition.IsNot">
            <summary>
            Match the opposite of the specified condition. The condition is negated.
            </summary>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.ContainsQueryElement">
            <summary>
            QueryElement that finds any values in a Column that contain the 
            specified value
            <seealso cref="T:RAD.AppFramework.QueryObjects.Criteria"/>
            </summary>
            <remarks>The LIKE predicate is used as the search operator</remarks>
            <example>
            <code lang="C#">
            
            using Northwind.Common;
            using Northwind.DatabaseSchema;
            using Northwind.BusinessService;
            using Northwind.Data;
            </code>
            <code lang="C#">
            
            OrdersDataSet OrdersList = new OrdersDataSet();
            OrdersService OrdersLogic = new OrdersService();
            
            Query OrdersQuery = CommonFactory.CreateQuery();
            
            OrdersQuery.And(<b>Criteria.Contains(OrdersTable.ShipName, "Special")</b>);
            
            OrdersLogic.GetByQuery(OrdersList, OrdersQuery);
            </code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.ContainsQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.Condition,System.Object)">
            <summary>
            Creates a new ContainsQueryElement that compares the Column to literal values
            </summary>
            <param name="column">The Column to compare e.g. ClientTable.Location</param>
            <param name="matchCondition">The negation condition e.g. Condition.IsNot</param>
            <param name="value">The value to search for e.g. "State"</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.ContainsQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,RAD.AppFramework.QueryObjects.Condition,System.Object)">
            <summary>
            Creates a new ContainsQueryElement that specifies the comparison method
            </summary>
            <param name="column">The Column to compare e.g. ClientTable.Location</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="matchCondition">The negation condition e.g. Condition.IsNot</param>
            <param name="value">The value to search for e.g. "State"</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.ContainsQueryElement.#ctor">
            <summary>
            Creates a new ContainsQueryElement
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.ContainsQueryElement.GetQueryText(RAD.AppFramework.QueryObjects.IQueryBuilder,System.Text.StringBuilder,System.Collections.ArrayList)">
            <summary>
            Adds to the Query text using the specified QueryBuilder
            </summary>
            <param name="builder">The IQueryBuilder to use to create the Query</param>
            <param name="queryText">A StringBuilder that contains the text of the Query</param>
            <param name="parameters">The parameters for any literal values in the Query</param>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.Criteria">
            <summary>
            A Factory that creates QueryElements to be added to a Query
            </summary>
            <example>
            <code>CustomerQuery.And(<b>Criteria.IsNull(CustomerTable.PaymentDate)</b>)</code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.#ctor">
            <summary>
            Prevents instances of the Criteria factory from being created
            </summary>		
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.Create(System.Enum,RAD.AppFramework.QueryObjects.Condition,RAD.AppFramework.QueryObjects.Comparison,System.Object[])">
            <summary>
            Creates a QueryElement with the specified condition and comparison type
            </summary>
            <param name="column">The Column to compare</param>
            <param name="matchCondition">The match condition (is, is not)</param>
            <param name="comparisonType">The comparision method for the column values</param>
            <param name="values">The value or values to search for</param>
            <returns>An QueryElement</returns>
            <example>
            <code>
            OrdersQuery.And(Criteria.Create(OrdersTable.OrderID, Condition.IsNot, Comparison.Between, 200, 500));
            </code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.Create(System.Enum,RAD.AppFramework.QueryObjects.Condition,RAD.AppFramework.QueryObjects.Comparison,RAD.AppFramework.QueryObjects.CompareAs,System.Object[])">
            <summary>
            Creates a QueryElement with the specified condition and comparison type
            </summary>
            <param name="column">The Column to compare</param>
            <param name="matchCondition">The match condition (is, is not)</param>
            <param name="comparisonType">The comparision method for the column values</param>
            <param name="compareMethod">The way to compare the column values and the search values</param>
            <param name="values">The value or values to search for</param>
            <returns>An QueryElement</returns>
            <example>
            <code>
            OrdersQuery.And(Criteria.Create(OrdersTable.OrderDate, Condition.IsNot, Comparison.Between, CompareAs.Expression, "getdate()-1", "getdate()+1"));
            </code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.Create(System.Enum,RAD.AppFramework.QueryObjects.Condition,RAD.AppFramework.QueryObjects.Comparison,System.Enum)">
            <summary>
            Creates a column comparision with the specified condition and comparision type
            </summary>
            <param name="column1">The first column to compare</param>
            <param name="matchCondition">The match condition (is, is not)</param>
            <param name="comparisonType">The comparision method used when comparing the columns</param>
            <param name="column2">The column to compare with the first column</param>
            <returns>An QueryElement</returns>
            <example>
            Find Orders for discontinued products. Join from the Orders table to the Order Details table, then join
            from the Order Details table to the Products table.
            <code>
            <b>OrdersQuery.And(Criteria.Create(OrdersTable.OrderID, Condition.Is, Comparison.EqualTo, OrderDetailsTable.OrderID));</b><br/>
            <b>OrdersQuery.And(Criteria.Create(OrderDetailssTable.ProductID, Condition.Is, Comparison.EqualTo, ProductsTable.OrderID));</b><br/>
            Criteria.EqualTo(ProductsTable.Discontinued, true));
            </code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.Between(System.Enum,System.Object,System.Object)">
            <summary>
            Creates a BetweenQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="valueLowest">The lowest value in the range</param>
            <param name="valueHighest">The highest value in the range</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.Between(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,System.Object,System.Object)">
            <summary>
            Creates a BetweenQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="valueLowest">The lowest value in the range</param>
            <param name="valueHighest">The highest value in the range</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.NotBetween(System.Enum,System.Object,System.Object)">
            <summary>
            Creates a negated BetweenQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="valueLowest">The lowest value in the range</param>
            <param name="valueHighest">The highest value in the range</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.NotBetween(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,System.Object,System.Object)">
            <summary>
            Creates a negated BetweenQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="valueLowest">The lowest value in the range</param>
            <param name="valueHighest">The highest value in the range</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.Contains(System.Enum,System.Object)">
            <summary>
            Creates a ContainsQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.Contains(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,System.Object)">
            <summary>
            Creates a ContainsQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.NotContains(System.Enum,System.Object)">
            <summary>
            Creates a negated ContainsQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.NotContains(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,System.Object)">
            <summary>
            Creates a negated ContainsQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.EndsWith(System.Enum,System.Object)">
            <summary>
            Creates an EndsWithQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.EndsWith(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,System.Object)">
            <summary>
            Creates an EndsWithQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.NotEndsWith(System.Enum,System.Object)">
            <summary>
            Creates a negated EndsWithQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.NotEndsWith(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,System.Object)">
            <summary>
            Creates a negated EndsWithQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.EqualTo(System.Enum,System.Object)">
            <summary>
            Creates an EqualToQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.EqualTo(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,System.Object)">
            <summary>
            Creates an EqualToQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.EqualTo(System.Enum,System.Enum)">
            <summary>
            Creates an EqualToQueryElement that compares one column with another column
            </summary>
            <param name="column1">The first column to compare e.g. ClientTable.ContactId</param>
            <param name="column2">The second column to compare e.g. ContactTable.ContactId</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.NotEqualTo(System.Enum,System.Object)">
            <summary>
            Creates a negated EqualToQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.NotEqualTo(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,System.Object)">
            <summary>
            Creates a negated EqualToQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.NotEqualTo(System.Enum,System.Enum)">
            <summary>
            Creates a negated EqualToQueryElement that compares one column with another column
            </summary>
            <param name="column1">The first column to compare e.g. ClientTable.ContactId</param>
            <param name="column2">The second column to compare e.g. ContactTable.ContactId</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.GreaterThan(System.Enum,System.Object)">
            <summary>
            Creates a GreaterThanQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.GreaterThan(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,System.Object)">
            <summary>
            Creates a GreaterThanQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.GreaterThan(System.Enum,System.Enum)">
            <summary>
            Creates a GreaterThanQueryElement that compares one column with another column
            </summary>
            <param name="column1">The first column to compare e.g. ClientTable.ContactId</param>
            <param name="column2">The second column to compare e.g. ContactTable.ContactId</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.GreaterThanOrEqualTo(System.Enum,System.Object)">
            <summary>
            Creates a GreaterThanOrEqualToQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.GreaterThanOrEqualTo(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,System.Object)">
            <summary>
            Creates a GreaterThanOrEqualToQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.GreaterThanOrEqualTo(System.Enum,System.Enum)">
            <summary>
            Creates a GreaterThanOrEqualToQueryElement that compares one column with another column
            </summary>
            <param name="column1">The first column to compare e.g. ClientTable.ContactId</param>
            <param name="column2">The second column to compare e.g. ContactTable.ContactId</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.In(System.Enum,System.Object[])">
            <summary>
            Creates an InQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="values">a list of values to find</param>
            <returns>a new QueryElement</returns>
            <example>
            <code>Criteria.In(ClientTable.CategoryCode, "NL", "FF", "XR")</code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.In(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,System.Object[])">
            <summary>
            Creates an InQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="values">a list of values to find</param>
            <returns>a new QueryElement</returns>
            <example>
            <code>Criteria.In(ConfigTable.ServerName, CompareAs.Expression, "@@SERVERNAME", "@@REMSERVER")</code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.NotIn(System.Enum,System.Object[])">
            <summary>
            Creates a negated InQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="values">a list of values to find</param>
            <returns>a new QueryElement</returns>
            <example>
            <code>Criteria.NotIn(ClientTable.CategoryCode, "NL", "FF", "XR")</code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.NotIn(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,System.Object[])">
            <summary>
            Creates a negated InQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="values">a list of values to find</param>
            <returns>a new QueryElement</returns>
            <example>
            <code>Criteria.NotIn(ConfigTable.ServerName, CompareAs.Expression, "@@SERVERNAME", "@@REMSERVER")</code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.IsNull(System.Enum)">
            <summary>
            Creates an IsNullQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.NotIsNull(System.Enum)">
            <summary>
            Creates a negated IsNullQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.LessThan(System.Enum,System.Object)">
            <summary>
            Creates a LessThanQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.LessThan(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,System.Object)">
            <summary>
            Creates a LessThanQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.LessThan(System.Enum,System.Enum)">
            <summary>
            Creates a LessThanQueryElement that compares one column with another column
            </summary>
            <param name="column1">The first column to compare e.g. ClientTable.ContactId</param>
            <param name="column2">The second column to compare e.g. ContactTable.ContactId</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.LessThanOrEqualTo(System.Enum,System.Object)">
            <summary>
            Creates a LessThanOrEqualToQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.LessThanOrEqualTo(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,System.Object)">
            <summary>
            Creates a LessThanOrEqualToQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.LessThanOrEqualTo(System.Enum,System.Enum)">
            <summary>
            Creates a LessThanOrEqualToQueryElement that compares one column with another column
            </summary>
            <param name="column1">The first column to compare e.g. ClientTable.ContactId</param>
            <param name="column2">The second column to compare e.g. ContactTable.ContactId</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.StartsWith(System.Enum,System.Object)">
            <summary>
            Creates a StartsWithQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.StartsWith(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,System.Object)">
            <summary>
            Creates a StartsWithQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.NotStartsWith(System.Enum,System.Object)">
            <summary>
            Creates a negated StartsWithQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Criteria.NotStartsWith(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,System.Object)">
            <summary>
            Creates a negated StartsWithQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.FirstName</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="value">The value to compare against the contents of the column</param>
            <returns>a new QueryElement</returns>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.EndsWithQueryElement">
            <summary>
            QueryElement that finds all rows where the values in the column end with the specified value
            <seealso cref="T:RAD.AppFramework.QueryObjects.Criteria"/>
            </summary>
            <example>
            <code lang="C#">
            
            using Northwind.Common;
            using Northwind.DatabaseSchema;
            using Northwind.BusinessService;
            using Northwind.Data;
            </code>
            <code lang="C#">
            
            OrdersDataSet OrdersList = new OrdersDataSet();
            OrdersService OrdersLogic = new OrdersService();
            
            Query OrdersQuery = CommonFactory.CreateQuery();
            
            OrdersQuery.And(Criteria.EqualTo(OrdersTable.CategoryID, 1));
            OrdersQuery.Or(<b>Criteria.EndsWith(OrdersTable.ShipName, "Company")</b>);
            
            OrdersLogic.GetByQuery(OrdersList, OrdersQuery);
            </code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.EndsWithQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.Condition,System.Object)">
            <summary>
            Creates a new EndsWithQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.SalesTotal</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
            <param name="value">The value to compare against the contents of the column</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.EndsWithQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,RAD.AppFramework.QueryObjects.Condition,System.Object)">
            <summary>
            Creates a new EndsWithQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.SalesTotal</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
            <param name="value">The value to compare against the contents of the column</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.EndsWithQueryElement.#ctor">
            <summary>
            Creates a new EndsWithQueryElement
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.EndsWithQueryElement.GetQueryText(RAD.AppFramework.QueryObjects.IQueryBuilder,System.Text.StringBuilder,System.Collections.ArrayList)">
            <summary>
            Adds to the Query text using the specified QueryBuilder
            </summary>
            <param name="builder">The IQueryBuilder to use to create the Query</param>
            <param name="queryText">A StringBuilder that contains the text of the Query</param>
            <param name="parameters">The parameters for any literal values in the Query</param>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.EqualToQueryElement">
            <summary>
            QueryElement that finds all rows where the values in the column are equal to the specified value
            <seealso cref="T:RAD.AppFramework.QueryObjects.Criteria"/>
            </summary>
            <example>
            <code lang="C#">
            
            using Northwind.Common;
            using Northwind.DatabaseSchema;
            using Northwind.BusinessService;
            using Northwind.Data;
            </code>
            <code lang="C#">
            
            OrdersDataSet OrdersList = new OrdersDataSet();
            OrdersService OrdersLogic = new OrdersService();
            
            Query OrdersQuery = CommonFactory.CreateQuery();
            
            OrdersQuery.And(<b>Criteria.EqualTo(OrdersTable.EmployeeID, 23)</b>);
            
            OrdersLogic.GetByQuery(OrdersList, OrdersQuery);
            </code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.EqualToQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.Condition,System.Object)">
            <summary>
            Creates a new EqualToQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.SalesTotal</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
            <param name="value">The value to compare against the contents of the column</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.EqualToQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,RAD.AppFramework.QueryObjects.Condition,System.Object)">
            <summary>
            Creates a new EqualToQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.SalesTotal</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
            <param name="value">The value to compare against the contents of the column</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.EqualToQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.Condition,System.Enum)">
            <summary>
            Creates a new EqualToQueryElement that compares two columns
            </summary>
            <param name="column1">The first column to compare e.g. ClientTable.CountryId</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
            <param name="column2">The second column to compare e.g. Country.CountryId</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.EqualToQueryElement.#ctor">
            <summary>
            Creates a new EqualToQueryElement
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.EqualToQueryElement.GetQueryText(RAD.AppFramework.QueryObjects.IQueryBuilder,System.Text.StringBuilder,System.Collections.ArrayList)">
            <summary>
            Adds to the Query text using the specified QueryBuilder
            </summary>
            <param name="builder">The IQueryBuilder to use to create the Query</param>
            <param name="queryText">A StringBuilder that contains the text of the Query</param>
            <param name="parameters">The parameters for any literal values in the Query</param>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.GreaterThanOrEqualToQueryElement">
            <summary>
            QueryElement that finds all rows where the values in the column are greater than or equal to the specified value
            <seealso cref="T:RAD.AppFramework.QueryObjects.Criteria"/>
            </summary>
            <example>
            <code lang="C#">
            
            using Northwind.Common;
            using Northwind.DatabaseSchema;
            using Northwind.BusinessService;
            using Northwind.Data;
            </code>
            <code lang="C#">
            
            OrdersDataSet OrdersList = new OrdersDataSet();
            OrdersService OrdersLogic = new OrdersService();
            
            Query OrdersQuery = CommonFactory.CreateQuery();
            
            DateTime FinYearStart = new DateTime(2000, 07, 01);
            OrdersQuery.And(<b>Criteria.GreaterThanOrEqualTo(OrdersTable.OrderDate, FinYearStart)</b>);
            
            OrdersLogic.GetByQuery(OrdersList, OrdersQuery);
            </code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.GreaterThanOrEqualToQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.Condition,System.Object)">
            <summary>
            Creates a new GreaterThanOrEqualToQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.SalesTotal</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
            <param name="value">The value to compare against the contents of the column</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.GreaterThanOrEqualToQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,RAD.AppFramework.QueryObjects.Condition,System.Object)">
            <summary>
            Creates a new GreaterThanOrEqualToQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.SalesTotal</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
            <param name="value">The value to compare against the contents of the column</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.GreaterThanOrEqualToQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.Condition,System.Enum)">
            <summary>
            Creates a new GreaterThanOrEqualToQueryElement that compares two columns
            </summary>
            <param name="column1">The first column to compare e.g. ClientTable.CountryId</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
            <param name="column2">The second column to compare e.g. Country.CountryId</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.GreaterThanOrEqualToQueryElement.#ctor">
            <summary>
            Creates a new GreaterThanOrEqualToQueryElement
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.GreaterThanOrEqualToQueryElement.GetQueryText(RAD.AppFramework.QueryObjects.IQueryBuilder,System.Text.StringBuilder,System.Collections.ArrayList)">
            <summary>
            Adds to the Query text using the specified QueryBuilder
            </summary>
            <param name="builder">The IQueryBuilder to use to create the Query</param>
            <param name="queryText">A StringBuilder that contains the text of the Query</param>
            <param name="parameters">The parameters for any literal values in the Query</param>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.GreaterThanQueryElement">
            <summary>
            QueryElement that finds all rows where the values in the column are greater than the specified value
            <seealso cref="T:RAD.AppFramework.QueryObjects.Criteria"/>
            </summary>
            <example>
            <code lang="C#">
            
            using Northwind.Common;
            using Northwind.DatabaseSchema;
            using Northwind.BusinessService;
            using Northwind.Data;
            </code>
            <code lang="C#">
            
            OrdersDataSet OrdersList = new OrdersDataSet();
            OrdersService OrdersLogic = new OrdersService();
            
            Query OrdersQuery = CommonFactory.CreateQuery();
            
            OrdersQuery.And(<b>Criteria.GreaterThan(OrdersTable.Freight, 100)</b>);
            
            OrdersLogic.GetByQuery(OrdersList, OrdersQuery);
            </code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.GreaterThanQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.Condition,System.Object)">
            <summary>
            Creates a new GreaterThanQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.SalesTotal</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
            <param name="value">The value to compare against the contents of the column</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.GreaterThanQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,RAD.AppFramework.QueryObjects.Condition,System.Object)">
            <summary>
            Creates a new GreaterThanQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.SalesTotal</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
            <param name="value">The value to compare against the contents of the column</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.GreaterThanQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.Condition,System.Enum)">
            <summary>
            Creates a new GreaterThanQueryElement that compares two columns
            </summary>
            <param name="column1">The first column to compare e.g. ClientTable.CountryId</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
            <param name="column2">The second column to compare e.g. Country.CountryId</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.GreaterThanQueryElement.#ctor">
            <summary>
            Creates a new GreaterThanQueryElement
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.GreaterThanQueryElement.GetQueryText(RAD.AppFramework.QueryObjects.IQueryBuilder,System.Text.StringBuilder,System.Collections.ArrayList)">
            <summary>
            Adds to the Query text using the specified QueryBuilder
            </summary>
            <param name="builder">The IQueryBuilder to use to create the Query</param>
            <param name="queryText">A StringBuilder that contains the text of the Query</param>
            <param name="parameters">The parameters for any literal values in the Query</param>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.InformixQueryBuilder">
            <summary>
            Creates Queries for Informix Databases
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.InformixQueryBuilder.#ctor">
            <summary>
            Creates a new QueryBuilder for Informix Databases
            </summary>		
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.InformixQueryBuilder.CreateCommand">
            <summary>
            Creates a Informix Command object
            </summary>
            <returns>a new OleDbCommand</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.InformixQueryBuilder.CreateCommandParameter">
            <summary>
            Creates a Informix Command parameter
            </summary>
            <returns>a new OleDbParameter</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.InformixQueryBuilder.GetTableName(System.String)">
            <summary>
            Gets a Table name formatted for Informix 
            </summary>
            <param name="tableName">The raw table name</param>
            <returns>The formatted table name</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.InformixQueryBuilder.GetColumnName(System.String)">
            <summary>
            Gets a Column name formatted for Informix
            </summary>
            <param name="columnName">The raw Column name</param>
            <returns>The formatted Column name</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.InformixQueryBuilder.GetParameterName(System.String)">
            <summary>
            Gets the name of a parameter for Informix queries
            </summary>
            <param name="columnName">The name of the Column that the parameter is for</param>
            <returns>a Parameter name</returns>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.InQueryElement">
            <summary>
            QueryElement that finds all rows where the values in the column are in the list of specified values
            <seealso cref="T:RAD.AppFramework.QueryObjects.Criteria"/>
            </summary>
            <example>
            <code lang="C#">
            
            using Northwind.Common;
            using Northwind.DatabaseSchema;
            using Northwind.BusinessService;
            using Northwind.Data;
            </code>
            <code lang="C#">
            
            OrdersDataSet OrdersList = new OrdersDataSet();
            OrdersService OrdersLogic = new OrdersService();
            
            Query OrdersQuery = CommonFactory.CreateQuery();
            
            OrdersQuery.And(<b>Criteria.In(OrdersTable.EmployeeID, 12, 23, 34)</b>);
            
            OrdersLogic.GetByQuery(OrdersList, OrdersQuery);
            </code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.InQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.Condition,System.Object[])">
            <summary>
            Creates a new InQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.SalesTotal</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
            <param name="values">a list of values to find</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.InQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,RAD.AppFramework.QueryObjects.Condition,System.Object[])">
            <summary>
            Creates a new InQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.SalesTotal</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
            <param name="values">a list of values to find</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.InQueryElement.#ctor">
            <summary>
            Creates a new InQueryElement
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.InQueryElement.GetQueryText(RAD.AppFramework.QueryObjects.IQueryBuilder,System.Text.StringBuilder,System.Collections.ArrayList)">
            <summary>
            Adds to the Query text using the specified QueryBuilder
            </summary>
            <param name="builder">The IQueryBuilder to use to create the Query</param>
            <param name="queryText">A StringBuilder that contains the text of the Query</param>
            <param name="parameters">The parameters for any literal values in the Query</param>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.IsNullQueryElement">
            <summary>
            QueryElement that finds all rows where the values in the column are NULL (DBNull)
            <seealso cref="T:RAD.AppFramework.QueryObjects.Criteria"/>
            </summary>
            <example>
            <code lang="C#">
            
            using Northwind.Common;
            using Northwind.DatabaseSchema;
            using Northwind.BusinessService;
            using Northwind.Data;
            </code>
            <code lang="C#">
            
            OrdersDataSet OrdersList = new OrdersDataSet();
            OrdersService OrdersLogic = new OrdersService();
            
            Query OrdersQuery = CommonFactory.CreateQuery();
            
            OrdersQuery.And(<b>Criteria.IsNull(OrdersTable.RequiredDate)</b>);
            
            OrdersLogic.GetByQuery(OrdersList, OrdersQuery);
            </code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.IsNullQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.Condition)">
            <summary>
            Creates a new IsNullQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.SalesTotal</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.IsNullQueryElement.#ctor">
            <summary>
            Creates a new IsNullQueryElement
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.IsNullQueryElement.GetQueryText(RAD.AppFramework.QueryObjects.IQueryBuilder,System.Text.StringBuilder,System.Collections.ArrayList)">
            <summary>
            Adds to the Query text using the specified QueryBuilder
            </summary>
            <param name="builder">The IQueryBuilder to use to create the Query</param>
            <param name="queryText">A StringBuilder that contains the text of the Query</param>
            <param name="parameters">The parameters for any literal values in the Query</param>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.LessThanOrEqualToQueryElement">
            <summary>
            QueryElement that finds all rows where the values in the column are less than or equal to the specified value
            <seealso cref="T:RAD.AppFramework.QueryObjects.Criteria"/>
            </summary>
            <example>
            <code lang="C#">
            
            using Northwind.Common;
            using Northwind.DatabaseSchema;
            using Northwind.BusinessService;
            using Northwind.Data;
            </code>
            <code lang="C#">
            
            OrdersDataSet OrdersList = new OrdersDataSet();
            OrdersService OrdersLogic = new OrdersService();
            
            Query OrdersQuery = CommonFactory.CreateQuery();
            
            OrdersQuery.And(<b>Criteria.LessThanOrEqualTo(OrdersTable.EmployeeID, 15)</b>);
            
            OrdersLogic.GetByQuery(OrdersList, OrdersQuery);
            </code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.LessThanOrEqualToQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.Condition,System.Object)">
            <summary>
            Creates a new LessThanOrEqualToQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.SalesTotal</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
            <param name="value">The value to compare against the contents of the column</param>	
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.LessThanOrEqualToQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,RAD.AppFramework.QueryObjects.Condition,System.Object)">
            <summary>
            Creates a new LessThanOrEqualToQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.SalesTotal</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
            <param name="value">The value to compare against the contents of the column</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.LessThanOrEqualToQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.Condition,System.Enum)">
            <summary>
            Creates a new LessThanOrEqualToQueryElement that compares two columns
            </summary>
            <param name="column1">The first column to compare e.g. ClientTable.CountryId</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
            <param name="column2">The second column to compare e.g. Country.CountryId</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.LessThanOrEqualToQueryElement.#ctor">
            <summary>
            Creates a new LessThanOrEqualToQueryElement
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.LessThanOrEqualToQueryElement.GetQueryText(RAD.AppFramework.QueryObjects.IQueryBuilder,System.Text.StringBuilder,System.Collections.ArrayList)">
            <summary>
            Adds to the Query text using the specified QueryBuilder
            </summary>
            <param name="builder">The IQueryBuilder to use to create the Query</param>
            <param name="queryText">A StringBuilder that contains the text of the Query</param>
            <param name="parameters">The parameters for any literal values in the Query</param>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.LessThanQueryElement">
            <summary>
            QueryElement that finds all rows where the values in the column are less than the specified value
            <seealso cref="T:RAD.AppFramework.QueryObjects.Criteria"/>
            </summary>
            <example>
            <code lang="C#">
            
            using Northwind.Common;
            using Northwind.DatabaseSchema;
            using Northwind.BusinessService;
            using Northwind.Data;
            </code>
            <code lang="C#">
            
            OrdersDataSet OrdersList = new OrdersDataSet();
            OrdersService OrdersLogic = new OrdersService();
            
            Query OrdersQuery = CommonFactory.CreateQuery();
            
            OrdersQuery.And(<b>Criteria.LessThan(OrdersTable.EmployeeID, 45)</b>);
            
            OrdersLogic.GetByQuery(OrdersList, OrdersQuery);
            </code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.LessThanQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.Condition,System.Object)">
            <summary>
            Creates a new LessThanQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.SalesTotal</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
            <param name="value">The value to compare against the contents of the column</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.LessThanQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,RAD.AppFramework.QueryObjects.Condition,System.Object)">
            <summary>
            Creates a new LessThanQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.SalesTotal</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
            <param name="value">The value to compare against the contents of the column</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.LessThanQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.Condition,System.Enum)">
            <summary>
            Creates a new LessThanQueryElement that compares two columns
            </summary>
            <param name="column1">The first column to compare e.g. ClientTable.CountryId</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
            <param name="column2">The second column to compare e.g. Country.CountryId</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.LessThanQueryElement.#ctor">
            <summary>
            Creates a new LessThanQueryElement
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.LessThanQueryElement.GetQueryText(RAD.AppFramework.QueryObjects.IQueryBuilder,System.Text.StringBuilder,System.Collections.ArrayList)">
            <summary>
            Adds to the Query text using the specified QueryBuilder
            </summary>
            <param name="builder">The IQueryBuilder to use to create the Query</param>
            <param name="queryText">A StringBuilder that contains the text of the Query</param>
            <param name="parameters">The parameters for any literal values in the Query</param>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.LogicalOperator">
            <summary>
            The logical operator that is used to associate 
            different query elements, groups of query elements or query elements within a group
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.LogicalOperator.And">
            <summary>
            Both of the criteria must match 
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.LogicalOperator.Or">
            <summary>
            Either of the criteria can match
            </summary>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.Query">
            <summary>
            A definition of a Query to perform against the Database
            </summary>
            <remarks>
            The CreateQuery method in the CommonFactory class should be
            called to create a Query for your application. This makes the
            it easier to change to a different query builder at a later stage.
            </remarks>
            <example>
            <code>Query CustomerQuery = CommonFactory.CreateQuery();</code>
            or
            <code>Query CustomerQuery = new Query(new SqlServerQueryBuilder());</code>
            </example>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.QueryElementCollection">
            <summary>
            A set of of Query elements grouped together to form a condition.
            </summary>
            <example>
            <code>
            Query CustomerQuery = CommonFactory.CreateQuery();
            
            CustomerQuery.And(Criteria.StartsWith(CustomersTable.CompanyName, "A"));
            
            <b>QueryElementCollection Group = new QueryElementCollection();</b>
            Group.And(Criteria.IsNull(CustomersTable.Region));
            Group.And(Criteria.EqualTo(CustomersTable.Country, "Mexico"));
            
            CustomerQuery.Or(Group);
            
            return GetByQuery(dataSetFill, CustomerQuery);
            </code>
            The example above would generate the following SQL statement:
            <code>
            SELECT	*
            FROM	Customers
            WHERE	
            	CompanyName LIKE 'A%') 
            	OR <b>(
            		Region IS NULL
            		AND Country = 'Mexico'
            	)</b>
            </code>
            Note that the values 'A%' and 'Mexico' are represented by parameters.
            The values are only shown to illustrate the example.
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.QueryElementCollection.#ctor(RAD.AppFramework.QueryObjects.QueryElement[])">
            <summary>
            Creates a new QueryElementCollection and specifies a list of QueryElements to add to the Group
            </summary>
            <param name="queryElement">The QueryElements to add to the QueryGroup</param>
            <example>
            <code>
            QueryElementCollection StartsWithGroup = new QueryElementCollection(
            	Criteria.StartsWith(ClientTableTest.ClientCode, "AB"),
            	Criteria.NotStartsWith(ClientTableTest.ClientCode, CompareAs.Expression, "@@SERVERNAME")
            );
            </code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.QueryElementCollection.#ctor">
            <summary>
            Creates a new QueryElementCollection
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.QueryElementCollection.And(RAD.AppFramework.QueryObjects.QueryElement)">
            <summary>
            Adds a QueryElement to the QueryElementCollection 
            with the <see cref="T:RAD.AppFramework.QueryObjects.LogicalOperator">LogicalOperator</see> AND
            </summary>
            <param name="queryElement">The query element to add</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.QueryElementCollection.Or(RAD.AppFramework.QueryObjects.QueryElement)">
            <summary>
            Adds a QueryElement to the QueryElementCollection 
            with the <see cref="T:RAD.AppFramework.QueryObjects.LogicalOperator">LogicalOperator</see> Or
            </summary>
            <param name="queryElement">The query element to add</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.QueryElementCollection.GetQueryText(RAD.AppFramework.QueryObjects.IQueryBuilder,System.Text.StringBuilder,System.Collections.ArrayList)">
            <summary>
            Adds to the Query text using the specified QueryBuilder
            </summary>
            <param name="builder">The IQueryBuilder to use to create the Query</param>
            <param name="queryText">A StringBuilder that contains the text of the Query</param>
            <param name="parameters">The parameters for any literal values in the Query</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.QueryElementCollection.Add(RAD.AppFramework.QueryObjects.QueryElement)">
            <summary>
            Add a QueryElement or QueryElementCollection to the collection
            </summary>
            <param name="value">The QueryElement to add</param>
            <returns>The position into which the new element was inserted</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.QueryElementCollection.RemoveAt(System.Int32)">
            <summary>
            removes the item at the specified index
            </summary>
            <param name="index">The zero-based index of the item to remove</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.QueryElementCollection.Insert(System.Int32,RAD.AppFramework.QueryObjects.QueryElement)">
            <summary>
            inserts an item to the list at the specified position
            </summary>
            <param name="index">The zero-based index at which value should be inserted</param>
            <param name="value">The QueryElement to insert into the IList</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.QueryElementCollection.Remove(RAD.AppFramework.QueryObjects.QueryElement)">
            <summary>
            removes the first occurrence of a specific QueryObject from the List
            </summary>
            <param name="value">The QueryElement to remove from the List</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.QueryElementCollection.Contains(RAD.AppFramework.QueryObjects.QueryElement)">
            <summary>
            determines whether the List contains a specific value
            </summary>
            <param name="value">The QueryElement to locate in the List</param>
            <returns>true if the QueryElement is found in the List; otherwise, false</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.QueryElementCollection.Clear">
            <summary>
            removes all items from the List
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.QueryElementCollection.IndexOf(RAD.AppFramework.QueryObjects.QueryElement)">
            <summary>
            determines the index of a specific item in the List
            </summary>
            <param name="value">The QueryElement to locate in the List</param>
            <returns>The index of the QueryElement if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.QueryElementCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            copies the elements of the collection to an Array, starting at a particular Array index
            </summary>
            <param name="newArray">The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing</param>
            <param name="index">The zero-based index in array at which copying begins</param>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.QueryElementCollection.Item(System.Int32)">
            <summary>
            gets or sets the QueryElement at the specified index
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.QueryElementCollection.Count">
            <summary>
            Gets the number of elements in the collection
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.Query.m_QueryBuilder">
            <summary>
            The IQueryBuilder that is used to build the query
            for a specific Database
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.Query.m_TableName">
            <summary>
            The name of the main table in the Query
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Query.#ctor">
            <summary>
            Creates a new instance of the Query class
            </summary>		
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Query.#ctor(RAD.AppFramework.QueryObjects.IQueryBuilder)">
            <summary>
            Creates a new instance of the Query class
            </summary>		
            <param name="builder">The QueryBuilder that will construct the Database-specific query</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Query.BuildCommand(System.Data.IDbCommand)">
            <summary>
            Sets the CommandText and parameters on the query
            </summary>
            <param name="command">The command object to set the CommandText and parameters for</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.Query.OnGetSchema">
            <summary>
            Get the XmlSchema for a Query
            </summary>
            <returns>An XmlSchema definition</returns>
            <remarks>
            This is not really used by the WDSL proxy generator
            so only a simple schema is returned
            </remarks>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.Query.TableName">
            <summary>
            The name of the main table in the query
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.Query.SelectType">
            <summary>
            A modifier such as DISTINCT or TOP that is added to the SELECT clause
            </summary>
            <example>
            This example show how to use SelectType and TopValue to return 
            a maximum of 250 rows
            <code>
            Query OrdersQuery = CommonFactory.CreateQuery();
            OrdersQuery.SelectType = <b>SelectType.TopRows</b>;
            OrdersQuery.TopValue = <b>250</b>;
            OrdersQuery.And(Criteria.EqualTo(OrdersTable.CustomerID, 55));
            
            OrdersService.Instance.GetByQuery(m_OrdersDataSet, OrdersQuery);
            </code>
            </example>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.Query.TopValue">
            <summary>
            Specifies the maximum number of rows returned when SelectType is set to SelectType.TopRows 
            or the percentage of the result set to return when SelectType is set to SelectType.TopPercent.
            </summary>
            <remarks>
            <p>When SelectType is set to SelectType.TopRows, TopValue must be a positive integer.</p>
            <p>When SelectType is set to SelectType.TopPercent, TopValue must be between 0 and 100. 
            For SelectType.TopPercent a value of 10 would return 10% of the total rows returned by the query.</p>
            </remarks>
            <example>
            This example show how to use SelectType and TopValue to return 
            the top 10% of the results of the query
            <code>
            Query OrdersQuery = CommonFactory.CreateQuery();
            OrdersQuery.SelectType = <b>SelectType.TopPercent</b>;
            OrdersQuery.TopValue = <b>10</b>;
            OrdersQuery.And(Criteria.EqualTo(OrdersTable.CustomerID, 55));
            
            OrdersService.Instance.GetByQuery(m_OrdersDataSet, OrdersQuery);
            </code>
            </example>
            
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.Query.Sort">
            <summary>
            A collection of SortElements that
            defines the order that the query results
            are returned
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.Query.QueryBuilder">
            <summary>
            The IQueryBuilder that is used to build the query
            for a specific Database
            </summary>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.SelectType">
            <summary>
            The modifier to add to the SELECT clause
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.SelectType.All">
            <summary>
            Specifies that duplicate rows can appear in the results. 
            All is the default.
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.SelectType.Distinct">
            <summary>
            Specifies that only unique rows can appear in the results. 
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.SelectType.TopRows">
            <summary>
            Specifies that only the first n rows are to be output from the query result set.
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.SelectType.TopPercent">
            <summary>
            only the first n percent of the rows are output from the result set. 
            When specified with PERCENT, TopValue must be an integer between 0 and 100.
            </summary>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.SortBy">
            <summary>
            A factory that creates SortElements
            </summary>
            <example>
            <code>
            Query OrdersQuery = CommonFactory.CreateQuery();
            
            OrdersQuery.Sort.Add(<b>SortBy.Ascending(OrdersTable.RequiredDate)</b>)
            </code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SortBy.#ctor">
            <summary>
            Prevents new instances of the SortBy factory from being created
            </summary>		
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SortBy.Create(System.Enum)">
            <summary>
            Creates a SortElement that sorts a column 
            using the default SortDirection
            </summary>
            <param name="column">The column to sort on</param>
            <returns>A newly created SortElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SortBy.Create(System.Enum,RAD.AppFramework.QueryObjects.SortDirection)">
            <summary>
            Creates a SortElement that sorts a column 
            using the specified SortDirection
            </summary>
            <param name="column">The column to sort on</param>
            <param name="direction">The direction to sort the column</param>
            <returns>A newly created SortElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SortBy.Create(RAD.AppFramework.QueryObjects.CompareAs,System.String,RAD.AppFramework.QueryObjects.SortDirection)">
            <summary>
            Creates a SortElement and specifies the Comparison method,
            the expression to sort on and the SortDirection
            </summary>
            <param name="compareMethod">The comparision method</param>
            <param name="expression">The expression to sort on</param>
            <param name="direction">The direction to sort</param>
            <returns>A newly created SortElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SortBy.Create(System.String,RAD.AppFramework.QueryObjects.SortDirection)">
            <summary>
            Creates a SortElement that sorts on an expression by specifying
            the expression to sort on and the SortDirection
            </summary>
            <param name="expression">The expression to sort on</param>
            <param name="direction">The direction to sort</param>
            <returns>A newly created SortElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SortBy.Create(System.String)">
            <summary>
            Creates a SortElement that sorts on an expression and specifies
            the expression to sort on. The default SortDirection is used
            </summary>
            <param name="expression">The expression to sort on</param>
            <returns>A newly created SortElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SortBy.Ascending(System.Enum)">
            <summary>
            Creates an ascending sort on the specified Column
            </summary>
            <param name="column">The Column to sort on</param>
            <returns>a new SortElement</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SortBy.Descending(System.Enum)">
            <summary>
            Creates an descending sort on the specified column
            </summary>
            <param name="column">The Column to sort on</param>
            <returns>a new SortElement</returns>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.SortDirection">
            <summary>
            The direction to sort by for a SortElement
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.SortDirection.Ascending">
            <summary>
            Sort ascending. The values will start at the lowest value
            and become higher as you move through the results.
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.SortDirection.Descending">
            <summary>
            Sort descending. The values will start at the highest value 
            and become lower as you move through the results.
            </summary>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.SortElement">
            <summary>
            A SortElement defines the ordering of the results of a Query
            </summary>
            <example>
            <code>OrdersQuery.Sort.Add(<b>new SortElement(OrdersTable.OrderDate, SortDirection.Descending)</b>);</code>
            the SortBy factory can also be used to create SortElements
            <code>OrdersQuery.Sort.Add(SortBy.Desceding(OrdersTable.OrderDate));</code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SortElement.#ctor(System.Enum)">
            <summary>
            Creates a SortElement and specifies the Column to sort on
            </summary>
            <param name="column">The Column to base the sort expression on</param>
            <example>
            <code>CustomerQuery.Sort.Add(<b>new SortElement(OrdersTable.CustomerName)</b>);</code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SortElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.SortDirection)">
            <summary>
            Creates a SortElement and specifies the Column to sort on 
            and the SortDirection
            </summary>
            <param name="column">The Column to base the sort expression on</param>
            <param name="direction">The direction to sort the Column on</param>
            <example>
            <code>OrdersQuery.Sort.Add(<b>new SortElement(OrdersTable.OrderDate, SortDirection.Descending)</b>);</code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SortElement.#ctor(RAD.AppFramework.QueryObjects.CompareAs,System.String,RAD.AppFramework.QueryObjects.SortDirection)">
            <summary>
            Creates a SortElement and specifies the Comparison method,
            the expression to sort on and the SortDirection
            </summary>
            <param name="compareMethod">The comparision method</param>
            <param name="expression">The expression to sort on</param>
            <param name="direction">The direction to sort</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SortElement.#ctor(System.String,RAD.AppFramework.QueryObjects.SortDirection)">
            <summary>
            Creates a SortElement that sorts on an expression by specifying
            the expression to sort on and the SortDirection
            </summary>
            <param name="expression">The expression to sort on</param>
            <param name="direction">The direction to sort</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SortElement.#ctor(System.String)">
            <summary>
            Creates a SortElement that sorts on an expression and specifies
            the expression to sort on. The default SortDirection is used
            </summary>
            <param name="expression">The expression to sort on</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SortElement.#ctor">
            <summary>
            Creates an SortElement
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SortElement.GetQueryText(RAD.AppFramework.QueryObjects.IQueryBuilder,System.Text.StringBuilder)">
            <summary>
            Adds the text of the SortElement to the StringBuilder
            </summary>
            <param name="builder">The QueryBuilder to use to create a Database-specific query</param>
            <param name="queryText">The StringBuilder to add the SortElement text to</param>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SortElement.TableName">
            <summary>
            The name of the Table that the Column to sort on belongs to
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SortElement.ColumnName">
            <summary>
            The name of the Column to sort on
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SortElement.Direction">
            <summary>
            The direction to sort the Column by
            </summary>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SortElement.CompareAs">
            <summary>
            The method to use when adding the sort column or expression
            to the query
            </summary>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.SortElementCollection">
            <summary>
            A collection of SortElements
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SortElementCollection.#ctor">
            <summary>
            Creates a new instance of the SortElementCollection class
            </summary>		
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SortElementCollection.Add(RAD.AppFramework.QueryObjects.SortElement)">
            <summary>
            Adds a SortElement to the collection
            </summary>
            <param name="value">The SortElement to add to the list</param>
            <returns>The position into which the new element was inserted</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SortElementCollection.Contains(RAD.AppFramework.QueryObjects.SortElement)">
            <summary>
            Determines whether the collection contains a specific SortElement
            </summary>
            <param name="value">The SortElement to locate in the collection</param>
            <returns>true if the SortElement is found in the collection; otherwise, false</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SortElementCollection.IndexOf(RAD.AppFramework.QueryObjects.SortElement)">
            <summary>
            determines the index of a specific item in the collection
            </summary>
            <param name="value">The SortElement to locate in the collection</param>
            <returns>The index of value if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SortElementCollection.Insert(System.Int32,RAD.AppFramework.QueryObjects.SortElement)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SortElementCollection.Remove(RAD.AppFramework.QueryObjects.SortElement)">
            <summary>
            inserts a SortElement into the collection at the specified position
            </summary>
            <param name="value">The SortElement to insert</param>
        </member>
        <member name="P:RAD.AppFramework.QueryObjects.SortElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets the SortElement at the specified index
            </summary>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.SqlServerQueryBuilder">
            <summary>
            Creates Queries for Microsoft SQL Server Databases
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlServerQueryBuilder.#ctor">
            <summary>
            Creates a new QueryBuilder for Microsoft SQL Server Databases
            </summary>		
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlServerQueryBuilder.CreateCommand">
            <summary>
            Creates a SQL Server Command object
            </summary>
            <returns>a new SqlCommand</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlServerQueryBuilder.CreateCommandParameter">
            <summary>
            Creates a SQL Server Command parameter
            </summary>
            <returns>a new SqlParameter</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlServerQueryBuilder.GetTableName(System.String)">
            <summary>
            Gets a Table name formatted for SQL Server 
            </summary>
            <param name="tableName">The raw table name</param>
            <returns>The formatted table name</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlServerQueryBuilder.GetColumnName(System.String)">
            <summary>
            Gets a Column name formatted for SQL Server
            </summary>
            <param name="columnName">The raw Column name</param>
            <returns>The formatted Column name</returns>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.SqlServerQueryBuilder.GetParameterName(System.String)">
            <summary>
            Gets the name of a parameter for SQL Server queries
            </summary>
            <param name="columnName">The name of the Column that the parameter is for</param>
            <returns>a Parameter name</returns>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.StartsWithQueryElement">
            <summary>
            QueryElement that finds all rows that start with the specified value
            <seealso cref="T:RAD.AppFramework.QueryObjects.Criteria"/>
            </summary>
            <example>
            <code lang="C#">
            
            using Northwind.Common;
            using Northwind.DatabaseSchema;
            using Northwind.BusinessService;
            using Northwind.Data;
            </code>
            <code lang="C#">
            
            OrdersDataSet OrdersList = new OrdersDataSet();
            OrdersService OrdersLogic = new OrdersService();
            
            Query OrdersQuery = CommonFactory.CreateQuery();
            
            OrdersQuery.And(<b>Criteria.StartsWith(OrdersTable.ShipName, "Dr.")</b>);
            OrdersQuery.Or(<b>Criteria.StartsWith(OrdersTable.ShipName, "Mr.")</b>);
            
            OrdersLogic.GetByQuery(OrdersList, OrdersQuery);
            </code>
            </example>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.StartsWithQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.Condition,System.Object)">
            <summary>
            Creates a new StartsWithQueryElement
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.SalesTotal</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
            <param name="value">The value to compare against the contents of the column</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.StartsWithQueryElement.#ctor(System.Enum,RAD.AppFramework.QueryObjects.CompareAs,RAD.AppFramework.QueryObjects.Condition,System.Object)">
            <summary>
            Creates a new StartsWithQueryElement and specifies the comparison method
            </summary>
            <param name="column">The Column to perform the comparison on e.g. ClientTable.SalesTotal</param>
            <param name="compareMethod">The comparison method e.g. CompareAs.Expression</param>
            <param name="matchCondition">The condition to use for the comparison e.g. Condition.IsNot</param>
            <param name="value">The value to compare against the contents of the column</param>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.StartsWithQueryElement.#ctor">
            <summary>
            Creates a new StartsWithQueryElement
            </summary>
        </member>
        <member name="M:RAD.AppFramework.QueryObjects.StartsWithQueryElement.GetQueryText(RAD.AppFramework.QueryObjects.IQueryBuilder,System.Text.StringBuilder,System.Collections.ArrayList)">
            <summary>
            Adds to the Query text using the specified QueryBuilder
            </summary>
            <param name="builder">The IQueryBuilder to use to create the Query</param>
            <param name="queryText">A StringBuilder that contains the text of the Query</param>
            <param name="parameters">The parameters for any literal values in the Query</param>
        </member>
        <member name="T:RAD.AppFramework.QueryObjects.ValueCompareType">
            <summary>
            The type of comparison to use when comparing the values
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.ValueCompareType.Literal">
            <summary>
            The value is a literal value such as a string or number
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.ValueCompareType.Column">
            <summary>
            The value is a column in the Database
            </summary>
        </member>
        <member name="F:RAD.AppFramework.QueryObjects.ValueCompareType.Expression">
            <summary>
            The value is an expression that will be evaluated by the Database
            </summary>
        </member>
        <member name="T:RAD.AppFramework.Reflection.CollectionContainsAttribute">
            <summary>
            The CollectionContains attribute is used to specify the Type
            that a strongly-typed Collection contains. 
            </summary>
            <example>
            <code>
            [CollectionContains(typeof(Customer))]
            public class CustomerCollection : CustomerCollectionBase
            {
            </code>
            </example>
            <remarks>
            It is used by the Collection classes that derive from BusinessObjectCollection
            </remarks>
        </member>
        <member name="F:RAD.AppFramework.Reflection.CollectionContainsAttribute.m_CollectionType">
            <summary>
            The Type that the Collection contains
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Reflection.CollectionContainsAttribute.#ctor">
            <summary>
            Adds the CollectionContains attribute to this class
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Reflection.CollectionContainsAttribute.#ctor(System.Type)">
            <summary>
            Adds the CollectionContains attribute to this class
            </summary>
            <param name="typeInCollection">The Type that the Collection contains</param>
        </member>
        <member name="P:RAD.AppFramework.Reflection.CollectionContainsAttribute.CollectionType">
            <summary>
            The Type that the Collection contains
            </summary>
        </member>
        <member name="T:RAD.AppFramework.Reflection.DatabaseColumnAttribute">
            <summary>
            Defines schema information for a Column in the Database
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Reflection.DatabaseColumnAttribute.#ctor">
            <summary>
            Adds the DatabaseColumn attribute to this field
            </summary>		
        </member>
        <member name="M:RAD.AppFramework.Reflection.DatabaseColumnAttribute.#ctor(System.String)">
            <summary>
            Adds the DatabaseColumn attribute to this field
            </summary>
            <param name="columnName">The name of the Column as it is in the Database</param>
        </member>
        <member name="M:RAD.AppFramework.Reflection.DatabaseColumnAttribute.#ctor(System.String,System.Data.DbType)">
            <summary>
            Adds the DatabaseColumn attribute to this field
            </summary>
            <param name="columnName">The name of the Column as it is in the Database</param>
            <param name="dataType">The data type of the Column</param>
        </member>
        <member name="M:RAD.AppFramework.Reflection.DatabaseColumnAttribute.#ctor(System.String,System.Data.DbType,System.Boolean)">
            <summary>
            Adds the DatabaseColumn attribute to this field
            </summary>
            <param name="columnName">The name of the Column as it is in the Database</param>
            <param name="dataType">The data type of the Column</param>
            <param name="allowDBNull">Indicating whether the Column allows null (DBNull) values</param>
        </member>
        <member name="M:RAD.AppFramework.Reflection.DatabaseColumnAttribute.#ctor(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Adds the DatabaseColumn attribute to this field
            </summary>
            <param name="columnName">The name of the Column as it is in the Database</param>
            <param name="dataType">The data type of the Column</param>
            <param name="length">Sets the maximum size of the data in the Column</param>
        </member>
        <member name="M:RAD.AppFramework.Reflection.DatabaseColumnAttribute.#ctor(System.String,System.Data.DbType,System.Int32,System.Boolean)">
            <summary>
            Adds the DatabaseColumn attribute to this field
            </summary>
            <param name="columnName">The name of the Column as it is in the Database</param>
            <param name="dataType">The data type of the Column</param>
            <param name="length">Sets the maximum size of the data in the Column</param>
            <param name="allowDBNull">Indicating whether the Column allows null (DBNull) values</param>
        </member>
        <member name="M:RAD.AppFramework.Reflection.DatabaseColumnAttribute.GetColumnAttribute(System.Enum)">
            <summary>
            Gets the DatabaseColumn attribute defined for a Schema enum
            </summary>
            <param name="column">The schema enum value e.g. ClientTable.ClientID</param>
            <returns>The DatabaseColumn attribute for the enum or null if no attributes were found</returns>
        </member>
        <member name="P:RAD.AppFramework.Reflection.DatabaseColumnAttribute.ColumnName">
            <summary>
            The name of the Column as it is in the Database
            </summary>
        </member>
        <member name="P:RAD.AppFramework.Reflection.DatabaseColumnAttribute.DataType">
            <summary>
            The data type of the Column
            </summary>
        </member>
        <member name="P:RAD.AppFramework.Reflection.DatabaseColumnAttribute.Length">
            <summary>
            The maximum size of the data in the Column
            </summary>
        </member>
        <member name="P:RAD.AppFramework.Reflection.DatabaseColumnAttribute.AllowDBNull">
            <summary>
            Indicates whether the Column allows null (DBNull) values
            </summary>
        </member>
        <member name="T:RAD.AppFramework.Reflection.DatabaseTableAttribute">
            <summary>
            Defines schema information for a Table in the Database
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Reflection.DatabaseTableAttribute.#ctor">
            <summary>
            Adds the DatabaseTable attribute to this enumeration or class
            </summary>		
        </member>
        <member name="M:RAD.AppFramework.Reflection.DatabaseTableAttribute.#ctor(System.String)">
            <summary>
            Adds the DatabaseTable attribute to this enumeration or class
            </summary>		
        </member>
        <member name="P:RAD.AppFramework.Reflection.DatabaseTableAttribute.TableName">
            <summary>
            The name of the Table in the Database
            </summary>
        </member>
        <member name="T:RAD.AppFramework.Reflection.DataRowColumnAttribute">
            <summary>
            The DataRowColumn attribute specifies that the property represents
            a DataColumn in the DataRow underlying the Business Object
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:RAD.AppFramework.Reflection.DataRowColumnAttribute.m_ColumnName">
            <summary>
            The name of the column in the underlying DataRow that this property represents
            </summary>
            <remarks>
            If the column name contains spaces or other code-unfriendly characters
            the column name and property name will be different 
            </remarks>
        </member>
        <member name="F:RAD.AppFramework.Reflection.DataRowColumnAttribute.m_AllowDBNull">
            <summary>
            Specifies weather the Database column allows NULL values or not
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Reflection.DataRowColumnAttribute.#ctor(System.String)">
            <summary>
            Adds the DataRowColumn Attribute to this property
            </summary>
            <param name="columnName">The name of the column in the underlying DataRow that this property represents</param>
        </member>
        <member name="M:RAD.AppFramework.Reflection.DataRowColumnAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Adds the DataRowColumn Attribute to this property
            </summary>
            <param name="columnName">The name of the column in the underlying DataRow that this property represents</param>
            <param name="allowDBNull">Weather the column can be NULL</param>
        </member>
        <member name="P:RAD.AppFramework.Reflection.DataRowColumnAttribute.ColumnName">
            <summary>
            The name of the column in the underlying DataRow 
            </summary>
        </member>
        <member name="P:RAD.AppFramework.Reflection.DataRowColumnAttribute.AllowDBNull">
            <summary>
            true if the underlying column can be set to NULL, false otherwise
            </summary>
        </member>
        <member name="T:RAD.AppFramework.Reflection.DataRowColumnPropertyDescriptor">
            <summary>
            DataRowColumnPropertyDescriptor
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:RAD.AppFramework.Reflection.DataRowColumnPropertyDescriptor.m_PropertyDataType">
            <summary>
            The DataType of the Property that this PropertyDescriptor represents
            </summary>
            <example>DateTime</example>
        </member>
        <member name="F:RAD.AppFramework.Reflection.DataRowColumnPropertyDescriptor.m_ColumnName">
            <summary>
            The name of the column in the database that this property represents
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Reflection.DataRowColumnPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,System.Attribute[],System.String)">
            <summary>
            Creates a new DataRowColumnPropertyDescriptor
            </summary>
            <param name="descriptor">The property descriptor for the underlying type</param>
            <param name="initialAttributes">Any attributes for the underlying type</param>
            <param name="columnName">The name of the column in the database that this property represents</param>
        </member>
        <member name="M:RAD.AppFramework.Reflection.DataRowColumnPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Gets the value of the property from the underlying DataRow
            </summary>
            <param name="domainObject">The Business Object to get the property value from</param>
            <returns>The value of the property or DBNull if the column contains null</returns>
        </member>
        <member name="M:RAD.AppFramework.Reflection.DataRowColumnPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Set the value of the property in the DataColumn in the underlying DataRow
            </summary>
            <param name="domainObject">The Business Object to set the property value on</param>
            <param name="newValue">The new value of the property</param>
        </member>
        <member name="M:RAD.AppFramework.Reflection.DataRowColumnPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Checks if the object value can be reset
            </summary>
            <param name="domainObject">The domain object</param>
            <returns>true if it can be reset, false otherwise</returns>
        </member>
        <member name="M:RAD.AppFramework.Reflection.DataRowColumnPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Resets the value of the object
            </summary>
            <param name="domainObject">The domain object</param>
        </member>
        <member name="M:RAD.AppFramework.Reflection.DataRowColumnPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Indicates whether the value of this property needs to be persisted
            </summary>
            <param name="domainObject">The domain object</param>
            <returns>true if the property should be persisted; otherwise, false</returns>
        </member>
        <member name="P:RAD.AppFramework.Reflection.DataRowColumnPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of the component this property is bound to
            </summary>
        </member>
        <member name="P:RAD.AppFramework.Reflection.DataRowColumnPropertyDescriptor.IsReadOnly">
            <summary>
            Gets a value indicating whether this property is read-only
            </summary>
        </member>
        <member name="P:RAD.AppFramework.Reflection.DataRowColumnPropertyDescriptor.PropertyType">
            <summary>
            Gets the type of the property
            </summary>
        </member>
        <member name="T:RAD.AppFramework.Winforms.ListNavigator">
            <summary>
            Summary description for ListNavigator.
            </summary>
        </member>
        <member name="F:RAD.AppFramework.Winforms.ListNavigator.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Winforms.ListNavigator.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Winforms.ListNavigator.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Winforms.ListNavigator.#ctor">
            <summary>
            Creates a new ListNavigator control
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Winforms.ListNavigator.AddEventHandlersForList">
            <summary>
            Adds Event Handlers so that this control will be notified 
            when the list is modified and when the current position changes
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Winforms.ListNavigator.RemoveEventHandlersForList">
            <summary>
            Removes any Event Handlers that were listening for List events
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Winforms.ListNavigator.UpdatePosition">
            <summary>
            Updates the number of the current object in the list, the
            count of items in the list and the state of the navigation buttons
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Winforms.ListNavigator.SetFocusToParentFirstControl">
            <summary>
            Set focus to the first control in the tab order
            of the form that this control is on
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Winforms.ListNavigator.UpdateButtons">
            <summary>
            Updates the Enabled state of the New and Delete buttons
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Winforms.ListNavigator.IsDesignMode">
            <summary>
            Checks if the Control is currently being designed in a designer
            </summary>
            <returns>true if the Control is being designed, false if the Control is being used at runtime</returns>
        </member>
        <member name="M:RAD.AppFramework.Winforms.ListNavigator.ConfirmChanges">
            <summary>
            Confirms any modifications to the current Object if 
            the ConfirmObjectChanges switch is set and the current
            Object has been modified
            </summary>
        </member>
        <member name="M:RAD.AppFramework.Winforms.ListNavigator.OnItemChanged">
            <summary>
            Sets up the controls when an item has been modified or a new item created
            </summary>
        </member>
        <member name="P:RAD.AppFramework.Winforms.ListNavigator.Dock">
            <summary>
            Overrides the default setting of the Dock property
            </summary>
        </member>
        <member name="T:RAD.AppFramework.BusinessObjectEditBegunEventHandler">
            <summary>
            The event handler for the EditBegun event
            </summary>
        </member>
        <member name="T:RAD.AppFramework.BusinessObjectEditCancelledEventHandler">
            <summary>
            The event handler for the EditCancelled event
            </summary>
        </member>
        <member name="T:RAD.AppFramework.BusinessObjectEditEndedEventHandler">
            <summary>
            The event handler for the EditEnded event
            </summary>
        </member>
        <member name="T:RAD.AppFramework.BusinessObjectModifiedEventHandler">
            <summary>
            Event Handler for the Modified event of the Business Object
            </summary>
        </member>
        <member name="T:RAD.AppFramework.BusinessObject">
            <summary>
            Base class for the BusinessObject
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:RAD.AppFramework.BusinessObject.m_ParentCollection">
            <summary>
            The Collection that this Object belongs to
            </summary>
        </member>
        <member name="F:RAD.AppFramework.BusinessObject.m_DataRow">
            <summary>
            The underlying DataRow that stores the values
            for the object
            </summary>
        </member>
        <member name="F:RAD.AppFramework.BusinessObject.m_InEditTransaction">
            <summary>
            Used by BeginEdit(), EndEdit() and CancelEdit()
            to check if an edit operation is currently being
            performed on the object
            </summary>
        </member>
        <member name="F:RAD.AppFramework.BusinessObject.m_WasModifiedInThisEditTransaction">
            <summary>
            Used by BeginEdit() and EndEdit() to check if the 
            object was modified in the current edit transaction
            </summary>
        </member>
        <member name="F:RAD.AppFramework.BusinessObject.m_IsDirty">
            <summary>
            true if changes have been made to the properties of 
            the object but have not been saved to the database
            </summary>
        </member>
        <member name="F:RAD.AppFramework.BusinessObject.m_IsValid">
            <summary>
            true if all of the validation checks for a derived
            object have passed successfully
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.#ctor(RAD.AppFramework.BusinessObjectCollection,System.Data.DataRow)">
            <summary>
            Creates a new instance of the BusinessObject based on 
            the values in a DataRow and links it to its parent list 
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.SetDefaultValues">
            <summary>
            Sets default values for new Objects 
            when overridden in derived classes
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.OnEditBegun">
            <summary>
            Raises the event that notifies that the BeginEdit() method has been called on this Object
            </summary>
            <remarks>
            This event is mainly used by the List to keep the Object list in sync
            </remarks>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.OnEditCancelled">
            <summary>
            Raises the event that notifies that the CancelEdit() method has been called on this Object
            </summary>
            <remarks>
            This event is mainly used by the List to keep the Object list in sync
            </remarks>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.OnEditEnded">
            <summary>
            Raises the event that notifies that the EndEdit() method has been called on this Object
            </summary>
            <remarks>
            This event is mainly used by the List to keep the Object list in sync
            </remarks>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.OnModified">
            <summary>
            Raises the event that notifies that one of the properties of the Object has been modified
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.MakeDirty">
            <summary>
            Marks the Object as modified and raises the Object modified event
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.MakeClean">
            <summary>
            Marks the Object as unmodified
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.Delete">
            <summary>
            Deletes the Object both from the List and the Database
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.BeginEdit">
            <summary>
            Begins an Edit transaction on the Object
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.CancelEdit">
            <summary>
            Cancels an Edit transaction on the Object
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.EndEdit">
            <summary>
            Commits an Edit transaction on the Object
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.GetConverter">
            <summary>
            Returns a type converter for the Business Object
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.GetEvents(System.Attribute[])">
            <summary>
            Returns the events for this Business Object using the attribute array as a filter 
            </summary>
            <param name="attributes">An array of type Attribute that is used as a filter</param>
            <returns>An empty EventDescriptorCollection</returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.GetEvents">
            <summary>
            Returns the events for this Business Object
            </summary>
            <returns>An empty EventDescriptorCollection</returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.GetComponentName">
            <summary>
            Returns the name of this Business Object
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns the Business Object that this value is a member of
            </summary>
            <param name="pd">A PropertyDescriptor that represents the property whose owner is to be found</param>
            <returns>the Business Object that this value is a member of</returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.GetAttributes">
            <summary>
            Returns a collection of type Attribute for this object
            </summary>
            <returns>an empty AttributeCollection</returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.GetProperties(System.Attribute[])">
            <summary>
            Returns the properties for this Business Object using the attribute array as a filter
            </summary>
            <param name="attributes">An array of type Attribute that is used as a filter</param>
            <returns>The PropertyDescriptorCollection for this Object</returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.GetProperties">
            <summary>
            Returns the properties for this Business Object 
            </summary>
            <returns>The PropertyDescriptorCollection for this Object</returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.GetEditor(System.Type)">
            <summary>
            Returns an editor of the specified type for this Business Object
            </summary>
            <param name="editorBaseType">A Type that represents the editor for this object</param>
            <returns>null</returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.GetDefaultProperty">
            <summary>
            Returns the default property for this Business Object
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.GetDefaultEvent">
            <summary>
            Returns the default event for this Business Object
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObject.GetClassName">
            <summary>
            Returns the class name of this Business Object
            </summary>
            <returns>null</returns>
        </member>
        <member name="E:RAD.AppFramework.BusinessObject.EditBegun">
            <summary>
            An event that is raised when the BeginEdit() method is called
            </summary>
        </member>
        <member name="E:RAD.AppFramework.BusinessObject.EditCancelled">
            <summary>
            An event that is raised when the CancelEdit() method is called
            </summary>
        </member>
        <member name="E:RAD.AppFramework.BusinessObject.EditEnded">
            <summary>
            An event that is raised when the EndEdit() method is called
            </summary>
        </member>
        <member name="E:RAD.AppFramework.BusinessObject.Modified">
            <summary>
            An event that is raised when properties of the Object are modified
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObject.ParentCollection">
            <summary>
            The Collection that this Object belongs to
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObject.Row">
            <summary>
            The underlying DataRow that stores the values
            for the object
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObject.IsDirty">
            <summary>
            Returns true if the properties of the object have 
            been modified and have not been saved to the database
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObject.IsValid">
            <summary>
            Returns true if all of the validation checks on the object
            have passed successfully
            </summary>
            <remarks>
            Each Business Object derived from this base class must 
            create its own validation checks and update m_IsValid
            </remarks>
        </member>
        <member name="T:RAD.AppFramework.BusinessObjectCollection">
            <summary>
            A base class for BusinessObjectCollections
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:RAD.AppFramework.BusinessObjectCollection.m_DatabaseConnection">
            <summary>
            The DatabaseConnection that is used to Load objects into the 
            Collection and to save changes to the objects
            </summary>
        </member>
        <member name="F:RAD.AppFramework.BusinessObjectCollection.m_DataTable">
            <summary>
            The DataTable that stores the DataRows that underlie the Business Objects
            </summary>
        </member>
        <member name="F:RAD.AppFramework.BusinessObjectCollection.m_ObjectCollection">
            <summary>
            Stores the Business Objects that this List contains
            </summary>
        </member>
        <member name="F:RAD.AppFramework.BusinessObjectCollection.m_TypeInCollection">
            <summary>
            The System.Type contained in the collection
            </summary>
            <example>
            <code>typeof(CustomerInvoice)</code>
            or
            <code>typeof(Employee)</code>
            </example>
        </member>
        <member name="F:RAD.AppFramework.BusinessObjectCollection.m_ItemPropertyCollection">
            <summary>
            A collection of properties for the Type contained in the list
            </summary>
        </member>
        <member name="F:RAD.AppFramework.BusinessObjectCollection.m_IsChildList">
            <summary>
            True if the Collection is a sub-collection of another object
            </summary>
        </member>
        <member name="F:RAD.AppFramework.BusinessObjectCollection.m_Prop">
            <summary>
            PropertyCollection cache
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.#ctor">
            <summary>
            Creates a new instance of the BusinessObjectCollection 
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.OnListReset">
            <summary>
            Raises the ListChanged event with the ListChangedType of Reset
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.OnListItemAdded(System.Int32)">
            <summary>
            Raises the ListChanged event with the ListChangedType of ItemAdded
            </summary>
            <param name="itemAddedIndex">The index of the item that was added</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.OnListItemChanged(System.Int32)">
            <summary>
            Raises the ListChanged event with the ListChangedType of ItemChanged
            </summary>
            <param name="itemChangedIndex">The index of the item that was changed</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.OnListItemDeleted(System.Int32)">
            <summary>
            Raises the ListChanged event with the ListChangedType of ItemDeleted
            </summary>
            <param name="itemDeletedIndex">The index of the item that was deleted</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.OnListItemMoved(System.Int32,System.Int32)">
            <summary>
            Raises the ListChanged event with the ListChangedType of ItemMoved
            </summary>
            <param name="itemNewIndex">The new index of the item</param>
            <param name="itemOldIndex">The old index of the item</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.MakeAllClean">
            <summary>
            Resets the IsDirty flag on all objects in the list to false
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.CreateNewBusinessObject(System.Data.DataRow,System.Boolean)">
            <summary>
            Creates a new instance of a Business Object of the Type
            specified by m_TypeInCollection
            </summary>
            <param name="underlyingRow">The DataRow that stores the values for the new Business Object</param>
            <param name="isNew">If true the SetDefaultValues() method will be called on the new Business Object</param>
            <returns>The newly created Business Object</returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.GetTypeInCollection(System.Type)">
            <summary>
            Get the Type of object contained in the collection from the 
            CollectionContains attribute applied to the class specified by collectionType
            </summary>
            <param name="CollectionType">The class to get the attribute from</param>
            <returns>The Type specified by the CollectionContains attribute</returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.RowAddedToDataTable(System.Object,System.Data.DataRowChangeEventArgs)">
            <summary>
            Creates a Business Object for each row as it is added to the DataTable
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">Event Information</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.CreateDataTableSchema">
            <summary>
            Each derived list class must override CreateDataTableSchema()
            and create its own Schema by adding DataColumn objects to the DataTable
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.AddEventHandlers(RAD.AppFramework.BusinessObject)">
            <summary>
            Adds event handlers to listen for events that the Child object will raise
            </summary>
            <param name="domainObject">The Business Object to add the event handlers to</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.BusinessObject_Modified(System.Object,RAD.AppFramework.BusinessObject)">
            <summary>
            An event that is raised when the Child Business Object is modified. Allows
            the list to raise the ListChanged event appropriately
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="domainObjectModifed">The Business Object that was modified</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.BusinessObject_CancelEdit(System.Object,RAD.AppFramework.BusinessObject,System.Boolean)">
            <summary>
            Handles the CancelEdit event for a BusinessObject
            </summary>
            <param name="sender">Event sender</param>
            <param name="domainObject">The object being edited</param>
            <param name="wasModifiedInThisEditTransaction">Flag that is true if the object was modified in the current edit transaction</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.BusinessObject_EndEdit(System.Object,RAD.AppFramework.BusinessObject,System.Boolean)">
            <summary>
            Handles the EndEdit event for a BusinessObject
            </summary>
            <param name="sender">Event sender</param>
            <param name="domainObject">The object being edited</param>
            <param name="wasModifiedInThisEditTransaction">Flag that is true if the object was modified in the current edit transaction</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.AddRowIfRowStateIsDetached(RAD.AppFramework.BusinessObject)">
            <summary>
            Adds the underlying DataRow to the DataTable if 
            the DataRow is a Detached row
            </summary>
            <param name="domainObject">The Business Object to check</param>
            <returns>true if the row was detached, false otherwise</returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.HookRowChangedEvent">
            <summary>
            Creates an Event handler to listen for the DataTable.RowRowChanged event
            so that this class will be notified of rows being added to the DataTable
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.UnhookRowChangedEvent">
            <summary>
            Removes the Event handler that listens for the DataTable.RowRowChanged event
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.DataTable_RowChanging(System.Object,System.Data.DataRowChangeEventArgs)">
            <summary>
            Handles the RowChanging event for the underlying DataTable
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
            <remarks>Used to raise notifications to the Business objects</remarks>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.Row_BeforeAdd(System.Data.DataRow)">
            <summary>
            Called before a DataRow is added to the underlying DataTable
            </summary>
            <param name="row">The row to be added</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.Row_BeforeChanged(System.Data.DataRow)">
            <summary>
            Called before a change is made to a DataRow in the underlying DataTable
            </summary>
            <param name="row">The row being changed</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.Row_BeforeDelete(System.Data.DataRow)">
            <summary>
            Called before a DataRow is deleted from the underlying DataTable
            </summary>
            <param name="row">The row being deleted</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.DataTable_RowChanged(System.Object,System.Data.DataRowChangeEventArgs)">
            <summary>
            Handles the RowChanged event on the DataTable
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.Row_AfterAdd(System.Data.DataRow)">
            <summary>
            Called after a DataRow is added to the underlying DataTable
            </summary>
            <param name="row">The row that was added</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.Row_AfterChanged(System.Data.DataRow)">
            <summary>
            Called after a DataRow is changed in the underlying DataTable
            </summary>
            <param name="row">The row that was changed</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.Row_AfterDelete(System.Data.DataRow)">
            <summary>
            Called after a DataRow is deleted from the underlying DataTable
            </summary>
            <param name="row">The row that was deleted</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.DataTable_ColumnChanging(System.Object,System.Data.DataColumnChangeEventArgs)">
            <summary>
            Handles the ColumnChanging event from the DataTable
            </summary>
            <param name="sender">Event sender</param>
            <param name="columnchangeinfo">Event arguments</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.DataTable_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
            <summary>
            Handles the ColumnChanged event from the DataTable
            </summary>
            <param name="sender">Event sender</param>
            <param name="columnchangeinfo">Event arguments</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire Collection to a compatible one-dimensional Array, starting at the specified index of the target array
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements 
            copied from the Collection. The Array must have zero-based indexing</param>
            <param name="index">The zero-based index in array at which copying begins</param>
        </member>
        <member name="F:RAD.AppFramework.BusinessObjectCollection.m_IsReadOnly">
            <summary>
            Specifies weather the list is read-only
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the Collection item at the specified index
            </summary>
            <param name="index">The zero-based index of the item to remove</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the IList at the specified position
            </summary>
            <param name="index">The zero-based index at which value should be inserted</param>
            <param name="value">The BusinessObject to insert into the IList</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.Remove(System.Object)">
            <summary>
            Removes an object from the Collection
            </summary>
            <param name="value">The object to remove</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.Contains(System.Object)">
            <summary>
            Determines whether the Collection contains a specific BusinessObject
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.Clear">
            <summary>
            Removes all elements from the collection
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the Collection
            </summary>
            <param name="value">The BusinessObject to locate in the Collection</param>
            <returns>The index of value if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.Add(System.Object)">
            <summary>
            Adds a BusinessObject to the Collection
            </summary>
            <param name="value">The BusinessObject to add to the Collection</param>
            <returns>The position into which the new element was inserted</returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the ListChanged event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.AddNew">
            <summary>
            Create a new Object and add it to the List. Call the Add() method of the List or 
            the EndEdit() method of the new Object to commit changes and add it to the list permanently
            </summary>
            <remarks>
            The AddNew() method creates a new method and adds it to the list but if CancelEdit()
            is called it will be removed from the list. EndEdit() or Add(NewObject) must be called
            to add it to the list permanently
            </remarks>
            <returns>A new Object of the Type specified for the List</returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Adds the PropertyDescriptor to the indexes used for searching
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the items in the List by the specified property
            </summary>
            <param name="property">The Property to sort by</param>
            <param name="direction">The direction to sort in</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Returns the index of the item that has the given PropertyDescriptor
            </summary>
            <param name="property">The PropertyDescriptor to search on</param>
            <param name="key">The value of the property parameter to search for</param>
            <returns>The index of the item that has the given PropertyDescriptor</returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Removes the PropertyDescriptor from the indexes used for searching
            </summary>
            <param name="property">The PropertyDescriptor to remove from the indexes used for searching</param>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.RemoveSort">
            <summary>
            Removes any sort applied using ApplySort
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns the properties of an item in the Collection
            </summary>
            <remarks>
            If listAccessors is not null then the PropertyDescriptors
            for the property of the current object must be supplied.
            This is used when one of the properties of the current object
            is a list source in itself and it has been bound as a DataMember
            to a DataGrid 
            e.g. 
            a Client object has a Projects property
            that is a list of Projects owned by the Client 
            <code>
            ProjectGrid.DataMember = "ProjectListByClientID";
            ProjectGrid.DataSource = Clients;
            </code>
            </remarks>
            <param name="listAccessors">
            A PropertyDescriptor array specifying which properties 
            to provide information on or null for the object 
            that the list contains
            </param>
            <returns>
            a PropertyDescriptorCollection containing the PropertyDescriptors for the
            Type in the list or one of the Lists that the object contains
            </returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Called to get the name of the list when viewing related 
            object collections in the DataGrid
            </summary>
            <param name="listAccessors">A list of PropertyDescriptor that describe the parent properties</param>
            <returns>A string that describes the current list</returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.GetPropertyDescriptorCollection(System.Collections.ArrayList)">
            <summary>
            Gets a PropertyDescriptorCollection based on the Properties passed to it
            </summary>
            <remarks>Called by GetItemProperties()</remarks>
            <param name="properties">A list of properties to create a PropertyDescriptorCollection from</param>
            <returns>A PropertyDescriptorCollection for the properties</returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.Match(System.Object,System.Object)">
            <summary>
            Checks if two objects match
            </summary>
            <param name="data">The object</param>
            <param name="searchValue">The value to match against</param>
            <returns>true if the objects match; false otherwise</returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the Collection
            </summary>
            <returns>An IEnumerator that can be used to iterate through the Collection</returns>
        </member>
        <member name="F:RAD.AppFramework.BusinessObjectCollection.m_IsDisposed">
            <summary>
            true if the Collection has been disposed
            </summary>
        </member>
        <member name="F:RAD.AppFramework.BusinessObjectCollection.m_Site">
            <summary>
            The ISite that this component belongs to
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessObjectCollection.Dispose">
            <summary>
            Frees any unmanaged resources
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObjectCollection.DbConnection">
            <summary>
            The DatabaseConnection that is used to Load objects into the 
            Collection and to save changes to the objects
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObjectCollection.Table">
            <summary>
            The DataTable that contains the DataRows underlying the Business Objects
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObjectCollection.IsChildList">
            <summary>
            True if the Collection is a sub-collection of another object
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObjectCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the Collection is synchronized
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObjectCollection.Count">
            <summary>
            Gets the number of elements contained in the Collection
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObjectCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the Collection
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObjectCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the Collection is read-only
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObjectCollection.Item(System.Int32)">
            <summary>
            Gets the BusinessObject at the specified index
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObjectCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the Collection has a fixed size
            </summary>
        </member>
        <member name="E:RAD.AppFramework.BusinessObjectCollection.ListChanged">
            <summary>
            Occurs when the list changes or an item in the list changes
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObjectCollection.AllowEdit">
            <summary>
            Gets whether you can update items in the list
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObjectCollection.AllowNew">
            <summary>
            Gets whether you can add items to the list using AddNew
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObjectCollection.AllowRemove">
            <summary>
            Gets whether you can remove items from the list, using Remove or RemoveAt
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObjectCollection.SupportsChangeNotification">
            <summary>
            Gets whether a ListChanged event is raised when the list changes or an item in the list changes
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObjectCollection.SupportsSearching">
            <summary>
            Gets whether the list supports searching using the Find method
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObjectCollection.SupportsSorting">
            <summary>
            Gets whether the list supports sorting
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObjectCollection.IsSorted">
            <summary>
            Gets whether the items in the list are sorted
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObjectCollection.SortDirection">
            <summary>
            Gets the direction of the sort
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObjectCollection.SortProperty">
            <summary>
            Gets the PropertyDescriptor that is being used for sorting
            </summary>
        </member>
        <member name="E:RAD.AppFramework.BusinessObjectCollection.Disposed">
            <summary>
            Raised when the Component has disposed of itself
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObjectCollection.Site">
            <summary>
            The ISite that this component belongs to
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessObjectCollection.IsDesignMode">
            <summary>
            Check if the Component is in Design mode
            </summary>
        </member>
        <member name="T:RAD.AppFramework.BusinessServiceObject">
            <summary>
            Base class for Business Service objects
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:RAD.AppFramework.BusinessServiceObject.m_DataObjectFactory">
            <summary>
            The factory used to create Database objects
            </summary>
        </member>
        <member name="F:RAD.AppFramework.BusinessServiceObject.m_DatabaseConnection">
            <summary>
            The Database Connection that will be used to read from and update the Database
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessServiceObject.#ctor">
            <summary>
            Creates a new instance of the BusinessServiceObject class
            </summary>
        </member>
        <member name="M:RAD.AppFramework.BusinessServiceObject.CreateDataObjectFactory">
            <summary>
            Creates an instance of a factory that is used to create Database objects
            </summary>
            <returns>A DatabaseAccessObjectFactory instance </returns>
        </member>
        <member name="M:RAD.AppFramework.BusinessServiceObject.UseConnectionAndTransaction(RAD.AppFramework.Data.DatabaseConnection)">
            <summary>
            Specifies the Database connection to use for any Data Access operations
            </summary>
            <param name="dbConnection">the Database connection to use for any Data Access operations</param>
            <returns>true on success, false otherwise</returns>
        </member>
        <member name="P:RAD.AppFramework.BusinessServiceObject.DataObjectFactory">
            <summary>
            The factory used to create Database objects
            </summary>
        </member>
        <member name="P:RAD.AppFramework.BusinessServiceObject.DbConnection">
            <summary>
            The Database Connection that will be used to read from and update the Database
            </summary>
        </member>
        <member name="T:RAD.AppFramework.DataAccessObject">
            <summary>
            DataAccessObject
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:RAD.AppFramework.DataAccessObject.m_DatabaseConnection">
            <summary>
            The Database Connection that will be used to read from and update the Database
            </summary>
        </member>
        <member name="M:RAD.AppFramework.DataAccessObject.#ctor">
            <summary>
            Creates a new DataAccess object
            </summary>
        </member>
        <member name="M:RAD.AppFramework.DataAccessObject.UseConnectionAndTransaction(RAD.AppFramework.Data.DatabaseConnection)">
            <summary>
            Specifies the Database connection to use for any Data Access operations
            </summary>
            <param name="dbConnection">the Database connection to use for any Data Access operations</param>
            <returns>true on success, false otherwise</returns>
        </member>
        <member name="P:RAD.AppFramework.DataAccessObject.DbConnection">
            <summary>
            The Database Connection that will be used to read from and update the Database
            </summary>
        </member>
        <member name="T:RAD.AppFramework.ObjectPropertyComparer">
            <summary>
            Compares two objects by a particular property 
            </summary>
            <remarks>
            Used by the BusinessObjectCollection class to sort the Business Object List Items
            </remarks>
        </member>
        <member name="F:RAD.AppFramework.ObjectPropertyComparer.m_Property">
            <summary>
            The property that the ObjectPropertyComparer uses to compare the objects
            </summary>
        </member>
        <member name="M:RAD.AppFramework.ObjectPropertyComparer.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Creates a new instance of the ObjectPropertyComparer and specifies the property to sort by
            </summary>
        </member>
        <member name="M:RAD.AppFramework.ObjectPropertyComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects by the property specified in the constructor
            </summary>
            <param name="object1">First object to compare</param>
            <param name="object2">Second object to compare</param>
            <returns>An integer that indicates the relative order of the comparands</returns>
        </member>
    </members>
</doc>
