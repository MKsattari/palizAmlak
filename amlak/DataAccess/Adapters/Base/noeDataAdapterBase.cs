using System;
using System.Data;
using System.Data.Common;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.ComponentModel;

using amlak.Common;

using RAD.AppFramework.Data;
using RAD.AppFramework.QueryObjects;

namespace amlak.DataAccess.Adapters.Base
{
	/// <summary>
	/// noeDataAdapterBase handles SELECT, INSERT, UPDATE and DELETE operations 
	/// for the noe table. 
	/// <seealso cref="noeDataAdapter"/>
	/// </summary>
	/// <remarks>
	/// Do not make modifications to this class. Any additional functionality for the noe table 
	/// must be added to the noeDataAdapter class.
	/// <br/><br/>
	/// This class was automatically generated by Rad Software NextGeneration <a href="http://www.radsoftware.com.au">http://www.radsoftware.com.au</a>
	/// </remarks>
	public abstract class noeDataAdapterBase : DataAccessObject
	{
		#region Fields
		
		/// <summary>
		/// The name of the stored procedure that is used to retrieve rows from the noe table by primary key
		/// </summary>
		protected string SelectBynoe_idCommandName = "gp_noe_SelectBynoe_id";
		

		#endregion
		
		
		#region Constructors
		
		/// <summary>
		/// Creates a new noeDataAdapterBase 
		/// that uses the specified DatabaseConnection
		/// </summary>
		protected noeDataAdapterBase(DatabaseConnection dbconnection) : this()
		{
			UseConnectionAndTransaction(dbconnection);
		}
		
		
		/// <summary>
		/// Creates a new noeDataAdapterBase 
		/// </summary>
		public noeDataAdapterBase() : base()
		{
			InsertCommandName = "gp_noe_Insert";
			UpdateCommandName = "gp_noe_Update";
			DeleteCommandName = "gp_noe_Delete";
			SelectAllCommandName = "gp_noe_SelectAll";
		
			//
			// Map the default table name of "Table" to the strongly typed DataTable 
			//
			Adapter.TableMappings.Add("Table", "noe");
			
			
		}
		
		
		#endregion
		
		
		#region Private Methods
		
		
		/// <summary>
		/// Creates an instance of a factory that is used to create Database objects
		/// </summary>
		/// <returns>A DatabaseAccessObjectFactory instance </returns>
		protected override DatabaseAccessObjectFactory CreateDataObjectFactory()
		{
			return CommonFactory.CreateDataObjectFactory();
		}
		

		/// <summary>
		/// Adds parameters representing the columns in the  
		/// new row to the Insert Command
		/// </summary>
		/// <param name="insertCommand">The command to add the parameters to</param>
		protected override void AddInsertCommandParameters(IDbCommand insertCommand)
		{
			base.AddInsertCommandParameters(insertCommand);
			
			insertCommand.Parameters.Add(DataObjectFactory.CreateCommandParameter("@noe_id", "noe_id", SqlDbType.Int));
			insertCommand.Parameters.Add(DataObjectFactory.CreateCommandParameter("@noe_nam", "noe_nam", SqlDbType.NVarChar, 200));
			insertCommand.Parameters.Add(DataObjectFactory.CreateCommandParameter("@noe_cls", "noe_cls", SqlDbType.NVarChar, 50));
			insertCommand.Parameters.Add(DataObjectFactory.CreateCommandParameter("@noe_tozi", "noe_tozi", SqlDbType.NVarChar, 200));
			
		}
		

		/// <summary>
		/// Adds parameters representing the columns in the 
		/// updated row to the Update Command
		/// </summary>
		/// <param name="updateCommand">The Command to add the parameters to</param>
		protected override void AddUpdateCommandParameters(IDbCommand updateCommand)
		{
			base.AddUpdateCommandParameters(updateCommand);
			
			updateCommand.Parameters.Add(DataObjectFactory.CreateCommandParameter("@noe_idOriginal", "noe_id", SqlDbType.Int, DataRowVersion.Original));
			updateCommand.Parameters.Add(DataObjectFactory.CreateCommandParameter("@noe_id", "noe_id", SqlDbType.Int));
			
			updateCommand.Parameters.Add(DataObjectFactory.CreateCommandParameter("@noe_nam", "noe_nam", SqlDbType.NVarChar, 200));
			updateCommand.Parameters.Add(DataObjectFactory.CreateCommandParameter("@noe_cls", "noe_cls", SqlDbType.NVarChar, 50));
			updateCommand.Parameters.Add(DataObjectFactory.CreateCommandParameter("@noe_tozi", "noe_tozi", SqlDbType.NVarChar, 200));
			
		}
		

		/// <summary>
		/// Adds parameters representing the columns in the
		/// deleted row to the Delete Command
		/// </summary>
		/// <param name="deleteCommand">The Command to add the parameters to</param>
		protected override void AddDeleteCommandParameters(IDbCommand deleteCommand)
		{
			base.AddDeleteCommandParameters(deleteCommand);
			
			deleteCommand.Parameters.Add(DataObjectFactory.CreateCommandParameter("@noe_id", "noe_id", SqlDbType.Int));
			
		}

		
		#endregion
		
		
		#region Public Methods
		
		/// <summary>
		/// Calls the respective INSERT, UPDATE, or DELETE statements 
		/// for each inserted, updated, or deleted row in the specified DataSet
		/// </summary>
		/// <param name="dataSetUpdate">The DataSet used to update the data source</param>
		/// <returns>The number of rows successfully updated from the DataSet</returns>
		public override int Update(DataSet dataSetUpdate)
		{
			int baseCount = base.Update(dataSetUpdate);
			
			if (AdapterCommands.InsertCommand == null)
			{
				//
				// Open the Database Connection 
				//
				DbConnection.Open();

				//
				// Insert Command
				//
				IDbCommand InsertCommand = DataObjectFactory.CreateCommand(DbConnection, CommandType.StoredProcedure);
				InsertCommand.CommandText = InsertCommandName;
				InsertCommand.UpdatedRowSource = UpdateRowSource.FirstReturnedRecord;
				AddInsertCommandParameters(InsertCommand);
				AdapterCommands.InsertCommand = InsertCommand;

				//
				// Update Command
				//
				IDbCommand UpdateCommand = DataObjectFactory.CreateCommand(DbConnection, CommandType.StoredProcedure);
				UpdateCommand.CommandText = UpdateCommandName;
				UpdateCommand.UpdatedRowSource = UpdateRowSource.FirstReturnedRecord;
				AddUpdateCommandParameters(UpdateCommand);
				AdapterCommands.UpdateCommand = UpdateCommand;

				//
				// Delete Command
				//
				IDbCommand DeleteCommand = DataObjectFactory.CreateCommand(DbConnection, CommandType.StoredProcedure);
				DeleteCommand.CommandText = DeleteCommandName;
				AddDeleteCommandParameters(DeleteCommand);
				AdapterCommands.DeleteCommand = DeleteCommand;
			}
			else
			{
				//
				// DataAdapter and Command objects have already been created
				// make sure the current connection and transaction are being used
				//
				DbConnection.Open();
				
				AdapterCommands.InsertCommand.Connection = DbConnection.Connection;
				AdapterCommands.InsertCommand.Transaction = DbConnection.Transaction;

				AdapterCommands.UpdateCommand.Connection = DbConnection.Connection;
				AdapterCommands.UpdateCommand.Transaction = DbConnection.Transaction;

				AdapterCommands.DeleteCommand.Connection = DbConnection.Connection;
				AdapterCommands.DeleteCommand.Transaction = DbConnection.Transaction;
			}

			//
			// Apply the changes in the DataSet and return the number of affected rows
			//
			try
			{
				return baseCount + Adapter.Update(dataSetUpdate);
			}
			finally
			{
				DbConnection.Close();
			}
		}
		
		
		/// <summary>
		/// Fill the DataSet with all rows from the noe Table
		/// </summary>
		/// <param name="dataSetFill">The DataSet to fill</param>
		/// <returns>A count of the rows added to the DataSet</returns>
		public override int Fill(DataSet dataSetFill)
		{
			int baseCount = base.Fill(dataSetFill);
			
			IDbCommand FillCommand = DataObjectFactory.CreateCommand(DbConnection, CommandType.StoredProcedure);

			FillCommand.CommandText = SelectAllCommandName;
			
			return baseCount + LoadFromCommand(dataSetFill, FillCommand);
		}
		
		
		/// <summary>
		/// Fill the DataSet by Query Definition
		/// </summary>
		/// <param name="dataSetFill">The DataSet to fill</param>
		/// <param name="queryDefinition">An Query object that defines the the query</param>
		/// <returns>A count of the rows added to the DataSet</returns>
		public override int FillByQuery(DataSet dataSetFill, Query queryDefinition)
		{
			if (queryDefinition == null)
			{
				throw new ArgumentNullException("queryDefinition");
			}

			IDbCommand FillCommand = DataObjectFactory.CreateCommand(DbConnection, CommandType.Text);

			if (queryDefinition.TableName.Length == 0)
			{
				queryDefinition.TableName = "gv_noe";
			}

			queryDefinition.BuildCommand(FillCommand);
			
			return LoadFromCommand(dataSetFill, FillCommand);
		}

		
		
		/// <summary>
		/// Fill the DataSet with all rows from the noe Table by Primary key (noe_id)
		/// </summary>
		/// <param name="dataSetFill">The DataSet to fill</param>
		/// <param name="noe_id">The noe_id to use as search criteria</param>
		/// <returns>A count of the rows added to the DataSet</returns>
		public int FillBynoe_id(DataSet dataSetFill, Int32 noe_id)
		{
			IDbCommand FillCommand = DataObjectFactory.CreateCommand(DbConnection, CommandType.StoredProcedure);

			FillCommand.CommandText = SelectBynoe_idCommandName;

			FillCommand.Parameters.Add(DataObjectFactory.CreateCommandParameter("@noe_id", SqlDbType.Int, noe_id));
			
			return LoadFromCommand(dataSetFill, FillCommand);
		}	


		
		#endregion
	}
}
