using System;
using System.Data;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Collections;

using RAD.AppFramework.Data;
using RAD.AppFramework.QueryObjects;

using amlak.Common;
using amlak.DataAccess;

namespace amlak.DataAccess.Readers.Base
{
	/// <summary>
	/// Base class for the memariDataReader
	/// <seealso cref="memariDataReader"/>
	/// </summary>
	/// <remarks>
	/// Provides forward-only read access to the memari table.
	/// 
	/// This class has been auto-generated and should not be modified. Any modifications should
	/// be made to the <see cref="memariDataReader">memariDataReader</see> class.
	/// <br/><br/>
	/// This class was automatically generated by Rad Software NextGeneration <a href="http://www.radsoftware.com.au">http://www.radsoftware.com.au</a>
	/// </remarks>
	public class memariDataReaderBase : StronglyTypedDataReader
	{		
		#region Fields
	
		/// <summary>The ordinal position of the MemariID column in the result set</summary>
		protected int m_MemariIDOrdinal;
		/// <summary>The ordinal position of the ReshtehID column in the result set</summary>
		protected int m_ReshtehIDOrdinal;
		/// <summary>The ordinal position of the ModiriatID column in the result set</summary>
		protected int m_ModiriatIDOrdinal;
		/// <summary>The ordinal position of the ShahrestanID column in the result set</summary>
		protected int m_ShahrestanIDOrdinal;
			
		#endregion
		
		
		#region Constructors
		
		/// <summary>
		/// Creates a new memariDataReaderBase
		/// </summary>
		public memariDataReaderBase()
		{
			DatabaseAccessObjectFactory DataObjectFactory = CommonFactory.CreateDataObjectFactory();
		
			Connection = DataObjectFactory.CreateConnection();
		}
		
		#endregion
		

		#region Column Attributes


		/// <summary>
		/// Returns the value of the MemariID column for the current row
		/// </summary>
		public Int32 MemariID
		{
			get 
			{
					return (Int32)DataRecord[m_MemariIDOrdinal];
			}
		}
	
		/// <summary>
		/// Returns the value of the ReshtehID column for the current row
		/// </summary>
		public Int32 ReshtehID
		{
			get 
			{
					return (Int32)DataRecord[m_ReshtehIDOrdinal];
			}
		}
	
		/// <summary>
		/// Returns the value of the ModiriatID column for the current row
		/// </summary>
		public Int32 ModiriatID
		{
			get 
			{
				try
				{
					return (Int32)DataRecord[m_ModiriatIDOrdinal];
				}
				catch (InvalidCastException e) 
				{
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			}
		}
	
		/// <summary>
		/// Returns the value of the ShahrestanID column for the current row
		/// </summary>
		public Int32 ShahrestanID
		{
			get 
			{
				try
				{
					return (Int32)DataRecord[m_ShahrestanIDOrdinal];
				}
				catch (InvalidCastException e) 
				{
					throw new StrongTypingException("Cannot get value because it is DBNull.", e);
				}
			}
		}
	

		#endregion

		
		#region Private Methods
		
		/// <summary>
		/// Sets the indexes of the columns within the result set
		/// </summary>
		protected override void SetColumnOrdinals()
		{
			m_MemariIDOrdinal = DataReader.GetOrdinal("MemariID");
			m_ReshtehIDOrdinal = DataReader.GetOrdinal("ReshtehID");
			m_ModiriatIDOrdinal = DataReader.GetOrdinal("ModiriatID");
			m_ShahrestanIDOrdinal = DataReader.GetOrdinal("ShahrestanID");
		}
		
		#endregion
		
		
		#region Public Methods
		
		/// <summary>
		/// Selects all rows from the memari table
		/// </summary>
		/// <returns>true on success, false otherwise</returns>
		public bool SelectAll()
		{
			DatabaseAccessObjectFactory DataObjectFactory = CommonFactory.CreateDataObjectFactory();
		
			CommandSelect = DataObjectFactory.CreateCommand(Connection, CommandType.StoredProcedure);
			CommandSelect.CommandText = "gp_memari_SelectAll";
			
			return OpenReader();
		}
		
		/// <summary>
		/// Selects rows from the memari table by Query definion
		/// </summary>
		/// <param name="queryDefinition">A Query object that defines the Query used to select rows from the database</param>
		/// <returns>true on success, false otherwise</returns>
		public bool SelectByQuery(Query queryDefinition)
		{
			DatabaseAccessObjectFactory DataObjectFactory = CommonFactory.CreateDataObjectFactory();

			CommandSelect = DataObjectFactory.CreateCommand(Connection, CommandType.Text);

			if (queryDefinition.TableName.Length == 0)
			{
				queryDefinition.TableName = "gv_memari";
			}

			queryDefinition.BuildCommand(CommandSelect);

			return OpenReader();
		}
		
		
		/// <summary>
		/// Selects rows from the memari table by Primary Key (MemariID)
		/// </summary>
		/// <param name="MemariID">The MemariID to use as search criteria</param>
		/// <returns>true on success, false otherwise</returns>
		public bool SelectByMemariID(Int32 MemariID)
		{
			DatabaseAccessObjectFactory DataObjectFactory = CommonFactory.CreateDataObjectFactory();
		
			CommandSelect = DataObjectFactory.CreateCommand(Connection, CommandType.StoredProcedure);
			CommandSelect.CommandText = "gp_memari_SelectByMemariID";
			
			CommandSelect.Parameters.Add(DataObjectFactory.CreateCommandParameter("@MemariID", SqlDbType.Int, MemariID));
			
			return OpenReader();
		}
		
		/// <summary>
		/// Checks if the value of the ModiriatID column is NULL
		/// </summary>
		/// <returns>true if ModiriatID is NULL, false if it is not NULL</returns>
		public bool IsModiriatIDNull()
		{
			return DataRecord.IsDBNull(m_ModiriatIDOrdinal);
		}
		
		/// <summary>
		/// Checks if the value of the ShahrestanID column is NULL
		/// </summary>
		/// <returns>true if ShahrestanID is NULL, false if it is not NULL</returns>
		public bool IsShahrestanIDNull()
		{
			return DataRecord.IsDBNull(m_ShahrestanIDOrdinal);
		}
		
		
		
		
		#endregion
	}
}
