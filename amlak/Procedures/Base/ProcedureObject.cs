//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace amlak.Procedures.Base
{
    using System.Data;
    using System.ComponentModel;
    using RAD.AppFramework.Data;
    using amlak.Common;
    
    
    /// <summary>
    /// Base class for all strongly-typed stored procedure classes
    /// </summary>
    public abstract class ProcedureObject : object, System.IDisposable, System.Data.IDbCommand
    {
        
        /// <summary>
        /// The Database Connection that will be used to read from and update the Database
        /// </summary>
        private DatabaseConnection m_DbConnection;
        
        private System.Data.IDbCommand m_Command;
        
        private System.Data.IDbDataAdapter m_DataAdapter;
        
        private DatabaseAccessObjectFactory m_DataObjectFactory;
        
        /// <summary>
        /// Creates a new instance of the ProcedureObject class
        /// </summary>
        public ProcedureObject()
        {
            m_DataObjectFactory = this.CreateDataObjectFactory();

            DbConnection = new DatabaseConnection(m_DataObjectFactory.CreateConnection());
            Command = m_DataObjectFactory.CreateCommand(DbConnection, System.Data.CommandType.StoredProcedure);
            DataAdapter = m_DataObjectFactory.CreateDataAdapter();
            DataAdapter.SelectCommand = Command;
        }
        
        /// <summary>
        /// The underlying IDbCommand
        /// </summary>
        protected System.Data.IDbCommand Command
        {
            get
            {
                return m_Command;
            }
            set
            {
                m_Command = value;
            }
        }
        
        /// <summary>
        /// The DataAdapter used to fill the DataSet with the results of the Procedure
        /// </summary>
        protected System.Data.IDbDataAdapter DataAdapter
        {
            get
            {
                return m_DataAdapter;
            }
            set
            {
                m_DataAdapter = value;
            }
        }
        
        /// <summary>
        /// The Database Connection that will be used to read from and update the Database
        /// </summary>
        [Browsable(false)]
        public DatabaseConnection DbConnection
        {
            get
            {
                return m_DbConnection;
            }
            set
            {
                m_DbConnection = value;
            }
        }
        
        /// <summary>
        /// The factory used to create Data objects
        /// </summary>
        protected DatabaseAccessObjectFactory DataObjectFactory
        {
            get
            {
                return m_DataObjectFactory;
            }
            set
            {
                m_DataObjectFactory = value;
            }
        }
        
        /// <summary>
        /// Gets the IDataParameterCollection
        /// </summary>
        public System.Data.IDataParameterCollection Parameters
        {
            get
            {
                return Command.Parameters;
            }
        }
        
        /// <summary>
        /// Specifies how the CommandText property is interpreted
        /// </summary>
        public System.Data.CommandType CommandType
        {
            get
            {
                return Command.CommandType;
            }
            set
            {
                Command.CommandType = value;
            }
        }
        
        /// <summary>
        /// Gets or sets how command results are applied to the DataRow when used by the Update method of a DataAdapter
        /// </summary>
        public System.Data.UpdateRowSource UpdatedRowSource
        {
            get
            {
                return Command.UpdatedRowSource;
            }
            set
            {
                Command.UpdatedRowSource = value;
            }
        }
        
        /// <summary>
        /// Gets or sets the text command to run against the data source
        /// </summary>
        public string CommandText
        {
            get
            {
                return Command.CommandText;
            }
            set
            {
                Command.CommandText = value;
            }
        }
        
        /// <summary>
        /// Gets or sets the wait time before terminating the attempt to execute a command and generating an error
        /// </summary>
        public int CommandTimeout
        {
            get
            {
                return Command.CommandTimeout;
            }
            set
            {
                Command.CommandTimeout = value;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        System.Data.IDbConnection System.Data.IDbCommand.Connection
        {
            get
            {
                return DbConnection.Connection;
            }
            set
            {
                DbConnection.Connection = value;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        System.Data.IDbTransaction System.Data.IDbCommand.Transaction
        {
            get
            {
                return DbConnection.Transaction;
            }
            set
            {
                DbConnection.Transaction = value;
            }
        }
        
        /// <summary>
        /// Creates a parameter and adds it to the Command
        /// </summary>
        /// <param name="name">The name of the parameter to add</param>
        /// <param name="dataType">The native datatype of the parameter</param>
        /// <returns>The newly created parameter</returns>
        protected System.Data.IDataParameter AddParameter(string name, System.Enum dataType)
        {
            return this.AddParameter(name, dataType, -1);
        }
        
        /// <summary>
        /// Creates a parameter and adds it to the Command
        /// </summary>
        /// <param name="name">The name of the parameter to add</param>
        /// <param name="dataType">The native datatype of the parameter</param>
        /// <param name="paramSize">The maximum size of data stored in this parameter</param>
        /// <returns>The newly created parameter</returns>
        protected System.Data.IDataParameter AddParameter(string name, System.Enum dataType, int paramSize)
        {
            System.Data.IDataParameter parameter = DataObjectFactory.CreateCommandParameter(name, dataType, paramSize);
            Command.Parameters.Add(parameter);
            return parameter;
        }
        
        /// <summary>
        /// Creates the default DatabaseAccessObjectFactory
        /// </summary>
        /// <returns>A new DatabaseAccessObjectFactory instance</returns>
        protected virtual DatabaseAccessObjectFactory CreateDataObjectFactory()
        {
            return CommonFactory.CreateDataObjectFactory();
        }
        
        /// <summary>
        /// Fills a DataSet using the underlying command
        /// </summary>
        /// <param name="resultSet">The DataSet to fill with the results of the stored procedure call.</param>
        /// <returns>The number of rows added to the DataSet</returns>
        public virtual int Fill(System.Data.DataSet resultSet)
        {
            this.UseConnectionAndTransaction(DbConnection);

            return DataAdapter.Fill(resultSet);
        }
        
        /// <summary>
        /// Specifies the Database connection to use for any Data Access operations
        /// </summary>
        /// <param name="newConnection">the Database connection to use for any Data Access operations</param>
        public void UseConnectionAndTransaction(DatabaseConnection newConnection)
        {
            DbConnection = newConnection;

            Command.Connection = DbConnection.Connection;
            Command.Transaction = DbConnection.Transaction;
        }
        
        /// <summary>
        /// Executes the CommandText against the Connection, and builds an IDataReader using one of the CommandBehavior values
        /// </summary>
        /// <param name="behavior">One of the CommandBehavior values</param>
        /// <returns>An IDataReader object</returns>
        public virtual System.Data.IDataReader ExecuteReader(System.Data.CommandBehavior behavior)
        {
            this.UseConnectionAndTransaction(DbConnection);
            return Command.ExecuteReader(behavior);
        }
        
        /// <summary>
        /// Executes the CommandText against the Connection, and builds an IDataReader
        /// </summary>
        /// <returns>An IDataReader object</returns>
        public virtual System.Data.IDataReader ExecuteReader()
        {
            this.UseConnectionAndTransaction(DbConnection);
            return Command.ExecuteReader();
        }
        
        /// <summary>
        /// Executes the Command and builds an XmlReader
        /// </summary>
        /// <returns>An XmlReader</returns>
        protected System.Xml.XmlReader GetXmlReader()
        {
            this.UseConnectionAndTransaction(DbConnection);
            return ((System.Data.SqlClient.SqlCommand)(Command)).ExecuteXmlReader();
        }
        
        /// <summary>
        /// Executes the Command and populates an XmlDocument
        /// </summary>
        /// <returns>An XmlDocument</returns>
        protected System.Xml.XmlDocument GetXmlDocument()
        {
            this.UseConnectionAndTransaction(DbConnection);
            try
            {
                DbConnection.Open();

                System.Xml.XmlDocument xmlDoc = new System.Xml.XmlDocument();
                xmlDoc.Load(((System.Data.SqlClient.SqlCommand)(Command)).ExecuteXmlReader());
                return xmlDoc;
            }
            finally
            {
                DbConnection.Close();
            }
        }
        
        /// <summary>
        /// Executes the Command and returns an XPathDocument
        /// </summary>
        /// <returns>An XPathDocument</returns>
        protected System.Xml.XPath.XPathDocument GetXPathDocument()
        {
            this.UseConnectionAndTransaction(DbConnection);
            try
            {
                DbConnection.Open();

                System.Xml.XmlReader reader = ((System.Data.SqlClient.SqlCommand)(Command)).ExecuteXmlReader();
                System.Xml.XPath.XPathDocument doc = new System.Xml.XPath.XPathDocument(reader);
                reader.Close();
                return doc;
            }
            finally
            {
                DbConnection.Close();
            }
        }
        
        /// <summary>
        /// Attempts to cancels the execution of the Command
        /// </summary>
        public void Cancel()
        {
            Command.Cancel();
        }
        
        /// <summary>
        /// Creates a prepared (or compiled) version of the command on the data source
        /// </summary>
        public void Prepare()
        {
            this.UseConnectionAndTransaction(DbConnection);
            try
            {
                DbConnection.Open();
                Command.Prepare();
            }
            finally
            {
                DbConnection.Close();
            }
        }
        
        /// <summary>
        /// Executes an SQL statement and returns the number of rows affected
        /// </summary>
        /// <returns>The number of rows affected</returns>
        public virtual int ExecuteNonQuery()
        {
            this.UseConnectionAndTransaction(DbConnection);
            try
            {
                DbConnection.Open();
                return Command.ExecuteNonQuery();
            }
            finally
            {
                DbConnection.Close();
            }
        }
        
        /// <summary>
        /// Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.
        /// </summary>
        /// <returns>The first column of the first row in the resultset</returns>
        object System.Data.IDbCommand.ExecuteScalar()
        {
            this.UseConnectionAndTransaction(DbConnection);
            try
            {
                DbConnection.Open();
                return Command.ExecuteScalar();
            }
            finally
            {
                DbConnection.Close();
            }
        }
        
        System.Data.IDbDataParameter System.Data.IDbCommand.CreateParameter()
        {
            return Command.CreateParameter();
        }
        
        /// <summary>
        /// Dispose of unmanaged resources
        /// </summary>
        public void Dispose()
        {
            Command.Dispose();

            DbConnection.Dispose();
        }
    }
}
